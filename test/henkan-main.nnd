;;-*- mode: nendo; syntax: scheme -*-
;;;
;;; henkan-main.nnd - 変換エンジンのコア部分のテストスイート
;;;  
;;;   Copyright (c) 2010  Kiyoka Nishiyama  <kiyoka@sumibi.org>
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  
;;;  $Id: 
;;;
(require "sekka/kvs")
(use nendo.test)
(use debug.null)
(use sekka.convert-jisyo)
(use sekka.henkan)
(load "./test/common.nnd")

(define dbtype   (string->symbol (first *argv*)))
(define userid   "dummy")
(define userid2  "dummy2")

(test-start "henkan engine")
;;===================================================================

;;-------------------------------------------------------------------
(define target   nil)
(cond
 ((eq? dbtype 'tokyocabinet)
  (set! target "./test.tch"))
 ((eq? dbtype 'redis)
  (set! target "localhost"))
 ((eq? dbtype 'gdbm)
  (set! target "./test"))
 ((eq? dbtype 'pure)
  (set! target "./test.dump"))
 ((eq? dbtype 'memcache)
  (error "memcached interface is obsolute."))
 (else
  (errorf "Unsupported db type [%s]" (symbol->string dbtype))))


;;-------------------------------------------------------------------
(test-section "Create jisyo for test suite")

(with-open "./test/skk-jisyo-in-1.txt"
           (lambda (_input)
             (let1 sekka-jisyo-data
		   (with-open #?="./test/sekka-jisyo-out-1.txt"
			      (lambda (f)
				(read f))
			      "r:UTF-8")
		   (test* "Create test jisyo"
			  sekka-jisyo-data          
			  (convert-skk-jisyo-f _input))
		   
		   (test* "default KVS type" 'tokyocabinet (get-kvs-type))
		   
		   (set-kvs-type #?=dbtype)
		   (test* "changed KVS type" dbtype (get-kvs-type))
		   
		   (let1 sio (StringIO.new (string-join sekka-jisyo-data "\n"))
			 (sio.set_encoding "utf-8")
			 (load-sekka-jisyo-f sio target))))
	   "r:UTF-8")


;;-------------------------------------------------------------------
(with-open "./test/sekka-dump-out-1.txt"
           (lambda (f)
             (let ((_answer (Digest::MD5.hexdigest (f.read)))
                   (_output1 (StringIO.new))
                   (_output2 (StringIO.new)))
               (_output1.set_encoding "utf-8")
               (_output2.set_encoding "utf-8")
               (when (or (eq? dbtype 'tokyocabinet)
                         (eq? dbtype 'redis)
                         (eq? dbtype 'gdbm)
                         (eq? dbtype 'pure))
                 (begin
                   (test-section "dump db")
                   
                   (test* "dump DB to SEKKA jisyo file. (1)"
                          _answer
                          (begin
                            (dump-sekka-jisyo-f _output1 target)
                            (with-open "./test/sekka-dump-out-1.tmp"
                                       (lambda (f) (f.write (_output1.string)))
                                       "w")
                            (Digest::MD5.hexdigest
                             (_output1.string))))
                   
                   (test* "dump/restore DB to SEKKA jisyo file. (1)"
                          _answer
                          (begin
                            ;; ---- RESTORE ----
                            (f.rewind)
                            (restore-sekka-jisyo-f f target)
                            
                            ;; ---- DUMP    ----
                            (dump-sekka-jisyo-f _output2 target)
                            (with-open "./test/sekka-dump-out-2.tmp"
                                       (lambda (f) (f.write (_output2.string)))
                                       "w")
                            (Digest::MD5.hexdigest
                             (_output2.string))))))))
	   "r:UTF-8")

                 
  

(test-section "Open the test-suite DB")
(define a-search (ApproximateSearch.new 0.94))
(define kvs      (Kvs.new dbtype))
(cond
 ((eq? dbtype 'tokyocabinet)
  (kvs.open target)
  (require "tokyocabinet"))
 ((eq? dbtype 'redis)
  (kvs.open target)
  (require "redis"))
 ((eq? dbtype 'gdbm)
  (kvs.open target)
  (require "gdbm"))
 ((eq? dbtype 'pure)
  (kvs.open target))
 ((eq? dbtype 'memcache)
  (error "memcached interface is obsolute."))
 (else
  (errorf "Unsupported db type [%s]" (symbol->string dbtype))))


;;-------------------------------------------------------------------
(test-section "Register User dict")
(for-each
 (lambda (x)
   (let ((_answer    (first x))
         (_user      (second x))
         (_dict-line (third x)))
     (test* (sprintf "register dict [%s] from queue" _dict-line)
            _answer
            (registerUserJisyo _user kvs _dict-line))))
 `(
   (#t  ,userid "まじぱねぇ /マジパネェ/")
   (#t  ,userid "ぶろぐr /ブログ/")
   (#t  ,userid "ぶろぐt /ブログ/")
   (#t  ,userid "へんかんえんじん /変換エンジン/")
   (#t  ,userid "はてぶ /はてブ/はてなブックマーク/")
   (#f  ,userid "はてぶ /はてブ/はてなブックマーク/")
   (#t  ,userid "まじぱねぇ /マジパネェ/まじパネェ/マジ半端ネェ/まじ半端ネェ/")
   (#f  ,userid "まじぱねぇ /マジパネェ/まじパネェ/マジ半端ネェ/まじ半端ネェ/")
   (#f  ,userid "まじぱねぇ /マジパネェ/まじパネェ/マジ半端ネェ/まじ半端ネェ/")
   (#t  ,userid "ゆーざーじしょ /ユーザー辞書/")
   (#f  ,userid ";; コメント")
   (#f  ,userid ";;-------- 罫線 -------")
   (#f  ,userid "") ;; 空行
   (#f  ,userid "aaaa") ;; 明らかなフォーマットエラー
   (#f  ,userid "単語 /たんご/") ;; フォーマットエラー
   (#t  ,userid "する //")                 ;; 平仮名フレーズ
   (#t  ,userid "したい //")               ;; 平仮名フレーズ
   (#t  ,userid "なります //")             ;; 平仮名フレーズ
   (#t  ,userid "なりました //")           ;; 平仮名フレーズ
   (#t  ,userid "なりません //")           ;; 平仮名フレーズ
   (#t  ,userid "はい       //")           ;; 平仮名フレーズ
   (#t  ,userid "あい       //")           ;; 平仮名フレーズ
   (#t  ,userid "あいう       //")         ;; 平仮名フレーズ
   (#t  ,userid "あいうえ       //")       ;; 平仮名フレーズ
   (#t  ,userid "あいうえお      //")      ;; 平仮名フレーズ
   (#t  ,userid "あいうえおか       //")   ;; 平仮名フレーズ
   (#t  ,userid "あいうえおかき      //")  ;; 平仮名フレーズ
   (#t  ,userid "なっている          //")  ;; 平仮名フレーズ
   (#t  ,userid "しています")              ;; 平仮名フレーズ
   ))


;;-------------------------------------------------------------------
(test-section "create ngram db entry")
(test* "db put 1"
       "/道路/通信"
       (let1 res (kvs.put! "2:高速" "/道路/通信")
         (res.force_encoding "UTF-8")))

(test* "db put 2"
       "/確率/ビル"
       (let1 res (kvs.put! "2:高い" "/確率/ビル")
         (res.force_encoding "UTF-8")))

(test* "db put 3"
       "/する"
       (let1 res (kvs.put! "2:確立" "/する")
         (res.force_encoding "UTF-8")))

(test* "db put 4"
       "/変数/を/が/の"
       (let1 res (kvs.put! "2:確率" "/変数/を/が/の")
         (res.force_encoding "UTF-8")))

(test* "db put 5"
       "/確率/可能性"       
       (let1 res (kvs.put! "2_:失敗" "/確率/可能性")
         (res.force_encoding "UTF-8")))

(test* "db put 6"
       "/あたり/あり/あるいは/および/か/かも/から/が/くらい/ぐらい/こそ/さえ/さん/し/しか/じゃ/じゃん/すら/する/そして/その/そのまま/そのもの/その他/それ/だ/だけ/だっ/だって/だの/だろ/って/っていう/ってな/っぽい/づけ/づける/て/で/でし/でしょ/です/でも/と/という/といった/とか/とかいう/として/とともに/とも/と共に/ど/どおり/な/ないし/なき/なく/なし/など/なら/ならびに/なり/なる/なんか/なんぞ/なんて/に/において/における/にたいする/について/にて/にとって/によって/により/による/に対し/に対して/に対する/に従い/に従って/に関して/に関する/ね/の/のみ/は/ばかり/ばっか/ばっかり/へ/ほか/ほど/または/まで/みたい/めい/も/もっと/や/やっ/やら/よ/より/らしい/を/をめぐって/を以て/を通して/を通じて/アプローチ/アンチエディプス・/グループ/ゲーム/コラム/コース/サイクル/サイト/シミュレーション/シンポジウム/ジェノミクス/スレ/セミナー/センター/テキスト/データ/トレーニング/ハンドブック/ピーク/ベース/マスター/メディカル・イーティング/モデル/リロン/レベル/ワインバーグサラム/ワークショップ/・/ー/一/一つ/一夜漬け/一般/一辺倒/上/下/世界/両面/並びに/中/中心/中編/主義/予想/予測/云々/交流/人間/付け/付ける/以上/以前/以外/仮説/会談/体系/作業/価値/価格/信仰/倒れ/倒産/値/偏重/優先/先行/入門/全/全体/全般/全開/内/内容/再/分布/分析/分野/刑法/前編/効率/勉強/動向/勝ち/勝率/包蔵/化/化学/厨/及び/叢書/史/君/哲学/問題/在庫/型/基盤/基礎/増補/大/天体/天文学/好き/委員/学/学会/学習/学者/宇宙/完成/実証/実践/実験/家/容量/密度/対策/専攻/専門/導入/屋/展開/崩壊/帳簿/平成/序説/度数/式/強度/形式/形成/後編/心理/志向/応用/思考/性/性能/情報/戦線/手法/批判/技術/抜き/担当/指導/振りかざし/採用/接続/掲示板/提唱/改訂/攻め/政治/政策/教え/教育/数値/数学/整然/整然と/整理/方法/暗記/曲線/書/最大/本/板/枠/枠組/枠組み/株価/核/根拠/検定/検討/検証/概念/概説/構成/構築/構造/模型/機関/武装/段/段数/水力/水準/波形/洋裁/活動/活用/派/混合/演算/演習/炸裂/無視/熱/物理/状況/班/現代/理学/理屈/理性/理解/理論/生態/生物/生計/用語/界/疫学/発展/発表/的/矛盾/知/知っ/知ら/知識/研/研修/研究/研究所/破綻/確立/社/社会/科/科学/科目/空/空気/立っ/立て/第/等/篇/系/紹介/経済/統合/編/習得/考古学/考察/者/背景/自体/自然/自身/英語/装置/解/解明/解析/解説/言語/計算/設計/評価/試験/詰め/誌/誕生/説明/課題/講座/講義/講習/負荷/走/追求/通り/適用/部/部会/部分/部門/配信/重/重視/量/鍵/開発/間/関係/関連/闘争/限界/集/集団/雑誌/電磁気/面/音楽/領域/魔術"
       (let1 res (kvs.put! "2_:理論" "/あたり/あり/あるいは/および/か/かも/から/が/くらい/ぐらい/こそ/さえ/さん/し/しか/じゃ/じゃん/すら/する/そして/その/そのまま/そのもの/その他/それ/だ/だけ/だっ/だって/だの/だろ/って/っていう/ってな/っぽい/づけ/づける/て/で/でし/でしょ/です/でも/と/という/といった/とか/とかいう/として/とともに/とも/と共に/ど/どおり/な/ないし/なき/なく/なし/など/なら/ならびに/なり/なる/なんか/なんぞ/なんて/に/において/における/にたいする/について/にて/にとって/によって/により/による/に対し/に対して/に対する/に従い/に従って/に関して/に関する/ね/の/のみ/は/ばかり/ばっか/ばっかり/へ/ほか/ほど/または/まで/みたい/めい/も/もっと/や/やっ/やら/よ/より/らしい/を/をめぐって/を以て/を通して/を通じて/アプローチ/アンチエディプス・/グループ/ゲーム/コラム/コース/サイクル/サイト/シミュレーション/シンポジウム/ジェノミクス/スレ/セミナー/センター/テキスト/データ/トレーニング/ハンドブック/ピーク/ベース/マスター/メディカル・イーティング/モデル/リロン/レベル/ワインバーグサラム/ワークショップ/・/ー/一/一つ/一夜漬け/一般/一辺倒/上/下/世界/両面/並びに/中/中心/中編/主義/予想/予測/云々/交流/人間/付け/付ける/以上/以前/以外/仮説/会談/体系/作業/価値/価格/信仰/倒れ/倒産/値/偏重/優先/先行/入門/全/全体/全般/全開/内/内容/再/分布/分析/分野/刑法/前編/効率/勉強/動向/勝ち/勝率/包蔵/化/化学/厨/及び/叢書/史/君/哲学/問題/在庫/型/基盤/基礎/増補/大/天体/天文学/好き/委員/学/学会/学習/学者/宇宙/完成/実証/実践/実験/家/容量/密度/対策/専攻/専門/導入/屋/展開/崩壊/帳簿/平成/序説/度数/式/強度/形式/形成/後編/心理/志向/応用/思考/性/性能/情報/戦線/手法/批判/技術/抜き/担当/指導/振りかざし/採用/接続/掲示板/提唱/改訂/攻め/政治/政策/教え/教育/数値/数学/整然/整然と/整理/方法/暗記/曲線/書/最大/本/板/枠/枠組/枠組み/株価/核/根拠/検定/検討/検証/概念/概説/構成/構築/構造/模型/機関/武装/段/段数/水力/水準/波形/洋裁/活動/活用/派/混合/演算/演習/炸裂/無視/熱/物理/状況/班/現代/理学/理屈/理性/理解/理論/生態/生物/生計/用語/界/疫学/発展/発表/的/矛盾/知/知っ/知ら/知識/研/研修/研究/研究所/破綻/確立/社/社会/科/科学/科目/空/空気/立っ/立て/第/等/篇/系/紹介/経済/統合/編/習得/考古学/考察/者/背景/自体/自然/自身/英語/装置/解/解明/解析/解説/言語/計算/設計/評価/試験/詰め/誌/誕生/説明/課題/講座/講義/講習/負荷/走/追求/通り/適用/部/部会/部分/部門/配信/重/重視/量/鍵/開発/間/関係/関連/闘争/限界/集/集団/雑誌/電磁気/面/音楽/領域/魔術")
         (res.force_encoding "UTF-8")))

;;-------------------------------------------------------------------
(test-section "simple db fetch")
(test* "db fetch 1"
       "Cへんかん"
       (kvs.get "M:henkan"))

(test* "db fetch 2"
       "Cかに/かんい"
       (kvs.get "M:kani"))

(test* "db fetch 3"
       "Cかんい"
       (kvs.get "M:kanni"))

(test* "db fetch 4"
       #f
       (kvs.get "M:aaaa"))

(test* "db fetch 5"
       "Cへんかんえんじん"
       (kvs.get "dummy:henkanenjin"))

(test* "db fetch 6"
       "i$ n"
       (kvs.get "Ik:M:kan"))

(test* "db fetch 7"
       "n$ q$"
       (kvs.get "Ik:M:henka"))

(test* "db fetch 8"
       "c t"
       (kvs.get "Ik:M:#neq#gatsu#ni"))

(test* "db fetch 9"
       "f u"
       (kvs.get "Ik:dummy:y"))

(test* "db fetch 10"
       "' - : ^"
       (kvs.get "Ik:dummy:yu"))

(test* "db fetch 11"
       "/ユーザー辞書"
       (kvs.get "dummy:ゆーざーじしょ"))

(test* "db fetch 12"
       "する"
       (kvs.get "dummy:=sr"))

(test* "db fetch 13"
       '("r" "u$")
       (list (kvs.get "Ih:dummy:=su")
             (kvs.get "Ih:dummy:=sur")))

(test* "db fetch 14"
       "したい"
       (kvs.get "dummy:=shitai"))

(test* "db fetch 15"
       '("i" "t")       
       (list (kvs.get "Ih:dummy:=sh")
             (kvs.get "Ih:dummy:=shi")))

(test* "db fetch 16"
       "Cへんかん"
       (kvs.get "M:henkaq"))

(test* "db fetch 17"
       "n$ q$"
       (kvs.get "Ik:M:henka"))

(test* "db fetch 18"
       "しています"
       (kvs.get "dummy:=siteimasu"))

;;-------------------------------------------------------------------
(test-section "Replace user dict entry")
(test*  "register user dict 1"
        #t
        (registerUserJisyo userid2 kvs
                           "てすとようえんとり /エントリA/エントリB/エントリC/\n"))

(test* "check user dict 1"
       "/エントリA/エントリB/エントリC"
       (kvs.get "dummy2:てすとようえんとり"))

(test* "check user dict 2"
       "i$"
       (kvs.get "Ik:dummy2:tesutoyouentor"))

(test* "flush user dict"
       11
       (flushUserJisyo userid2 kvs))

;; 直前にflushしているのでgetに失敗しないといけない。
(test* "check user dict 3"
       :no-entry
       (kvs.get "dummy2:てすとようえんとり" :no-entry))

(test* "check user dict 4"
       :no-entry
       (kvs.get "dummy2:(te)" :no-entry))

(test*  "register user dict 2"
        #t
        (registerUserJisyo userid2 kvs
                           "てすとようえんとり /エントリA/エントリC/\n"))

;; "エントリB" という単語が消えないといけない。
(test* "check user dict 5"
       "/エントリA/エントリC"
       (kvs.get "dummy2:てすとようえんとり"))

(test* "check user dict 6"
       '("n t" "t" "t")
       (list
        (kvs.get "Ik:dummy2:tesutoyouen")
        (kvs.get "Ik:dummy2:tesutoyouenn")
        (kvs.get "Ik:dummy2:tesutoyoueq")))


;;-------------------------------------------------------------------
(test-section "approximate-search core")

(test* "search keyword list 1"
       '((1.0 "henkan") (0.981 "henkann") (0.9722 "henka") (0.9444 "henkaq"))
       (my-round-map
        (arr->list
         (a-search.search userid kvs "henkan" "k"))))

(test* "search keyword list 2"
       '((1.0 "hennkan") (0.9875 "hennkann") (0.981 "hennka") (0.9619 "hennkaq") (0.9421 "hennkanenjin") (0.9421 "hennkanenjiq") (0.9421 "hennkanenzin") (0.9421 "hennkanenziq") (0.9421 "hennkaneqjin") (0.9421 "hennkaneqjiq") (0.9421 "hennkaneqzin") (0.9421 "hennkaneqziq"))
       (my-round-map
        (arr->list
         (a-search.search userid kvs "hennkan" "k"))))

(test* "search keyword list 3"
       '((1.0 "henkann") (0.981 "henkan") (0.9524 "henka") (0.9449 "henkanenjin") (0.9449 "henkanenjiq") (0.9449 "henkanenzin") (0.9449 "henkanenziq") (0.9421 "henkannenjin") (0.9421 "henkannenjiq") (0.9421 "henkannenzin") (0.9421 "henkannenziq") (0.9421 "henkanneqjin") (0.9421 "henkanneqjiq") (0.9421 "henkanneqzin") (0.9421 "henkanneqziq"))
       (my-round-map
        (arr->list
         (a-search.search userid kvs "henkann" "k"))))

(test* "search keyword list 4"
       '((1.0 "hennkann") (0.9875 "hennkan") (0.9667 "hennka") (0.9537 "hennkanenjin") (0.9537 "hennkanenjiq") (0.9537 "hennkanenzin") (0.9537 "hennkanenziq") (0.9537 "hennkaneqjin") (0.9537 "hennkaneqzin") (0.9507 "hennkannenjin") (0.9507 "hennkannenjiq") (0.9507 "hennkannenzin") (0.9507 "hennkannenziq") (0.9507 "hennkanneqjin") (0.9507 "hennkanneqjiq") (0.9507 "hennkanneqzin") (0.9507 "hennkanneqziq") (0.9476 "hennkaq") (0.9408 "hennkanenjinn") (0.9408 "hennkanennjin") (0.9408 "hennkanennjiq") (0.9408 "hennkanennzin") (0.9408 "hennkanennziq") (0.9408 "hennkanenzinn") (0.9408 "hennkaneqjinn") (0.9408 "hennkaneqzinn"))
       (my-round-map
        (arr->list
         (a-search.search userid kvs "hennkann" "k"))))

(test* "search keyword list 5"
       '((1.0 "heqkaq") (0.9722 "heqka") (0.9444 "heqkan"))
       (my-round-map
        (arr->list
         (a-search.search userid kvs "heqkaq" "k"))))

(test* "search keyword list 6"
       '((0.9762 "henkaS"))
       (my-round-map
        (arr->list
         (a-search.search userid kvs "henkanS" "K"))))

(test* "search keyword list 7"
       '((0.9833 "hennkaS") (0.9417 "henkaS"))
       (my-round-map
        (arr->list
         (a-search.search userid kvs "hennkanS" "K"))))

(test* "approximate search 1"
       '((1.0 "henka" "Cへんか") (0.9722 "henkan" "Cへんかん") (0.9722 "henkaq" "Cへんかん") (0.9524 "henkann" "Cへんかん"))
       (my-round-map
        (approximate-search userid kvs "henka"  "k" 0)))

(test* "approximate search 2"
       '((1.1 "hennka" "Cへんか") (1.079 "hennkan" "Cへんかん") (1.079 "hennkaq" "Cへんかん") (1.0633 "hennkann" "Cへんかん"))
       (my-round-map
        (approximate-search userid kvs "hennka"  "k" 0)))

(test* "approximate search 3"
       '((0.9722 "henka" "Cへんか") (0.9444 "henkan" "Cへんかん") (0.9444 "henkaq" "Cへんかん"))
       (my-round-map
        (approximate-search userid kvs "henkaS"  "k" 0)))

(test* "approximate search 4"
       '((1.079 "hennka" "Cへんか") (1.0581 "hennkan" "Cへんかん") (1.0581 "hennkaq" "Cへんかん") (1.0424 "hennkann" "Cへんかん"))
       (my-round-map
        (approximate-search userid kvs "hennkaS"  "k" 0)))

(test* "approximate search 5"
       '((1.0 "kani" "Cかに") (1.0 "kani" "Cかんい"))
       (my-round-map
        (approximate-search userid kvs "kani"  "k" 0)))

(test* "approximate search 6"
       '((1.1 "hennka" "Cへんか"))
       (my-round-map
        (approximate-search userid kvs "hennka"  "k" 1)))

(test* "approximate search 7"
       '((1.1 "hennka" "Cへんか") (1.079 "hennkan" "Cへんかん"))
       (my-round-map
        (approximate-search userid kvs "hennka"  "k" 2)))

(test* "approximate search 8"
       '((1.0 "saki" "Cさき"))
       (my-round-map
        (approximate-search userid kvs "saki"  "k" 0)))

(test* "approximate search 9"
       '((1.0 "inyou" "Cいんよう"))
       (my-round-map
        (approximate-search userid kvs "inyou"  "k" 0)))

(test* "approximate search 10"
       '((1.1 "innyou" "Cいんよう") (1.0 "innyou" "Cいんにょう"))
       (my-round-map
        (approximate-search userid kvs "innyou"  "k" 0)))

(test* "approximate search 11"
       '((0.981 "#gyoume" "C#ぎょうめ"))
       (my-round-map
        (approximate-search userid kvs "#gyoum"  "k" 0)))

(test* "approximate search 12"
       '((0.9722 "#kara#" "C#から#"))
       (my-round-map
        (approximate-search userid kvs "#kara"  "k" 0)))

(test* "approximate search 13"
       '((1.0 "=shita" "した") (0.981 "=shitai" "したい"))
       (my-round-map
        (approximate-search userid kvs "=shita"  "h" 0)))

(test* "approximate search 14"
       '()
       (my-round-map
        (approximate-search userid kvs "=shit"  "h" 0)))

(test* "approximate search 15"
       '((1.0 "=sr" "する"))
       (my-round-map
        (approximate-search userid kvs "=sr"  "h" 0)))

(test* "approximate search 16"
       '()
       (my-round-map
        (approximate-search userid kvs "=sur"  "h" 0)))

(test* "approximate search 17"
       '()
       (my-round-map
        (approximate-search userid kvs "=sure"  "h" 0)))

(test* "approximate search 18"
       '((0.9926 "=narimasd" "なりません") (0.9926 "=narimast" "なりました") (0.9926 "=narimasu" "なります") (0.9867 "=narimasen" "なりません") (0.9867 "=narimaseq" "なりません") (0.9833 "=narims" "なります") (0.9752 "=narimasenn" "なりません") (0.9752 "=narimasita" "なりました"))
       (my-round-map
        (approximate-search userid kvs "=narimas"  "h" 0)))

(test* "approximate search 19"
       '((0.9967 "=narimasen" "なりません") (0.9967 "=narimaseq" "なりません") (0.989 "=narimasenn" "なりません") (0.9852 "=narimasd" "なりません") (0.9852 "=narimast" "なりました") (0.9852 "=narimasu" "なります"))
       (my-round-map
        (approximate-search userid kvs "=narimase"  "h" 0)))

(test* "approximate search 20"
       '((0.9852 "=narimasd" "なりません") (0.9852 "=narimast" "なりました") (0.9852 "=narimasu" "なります") (0.9793 "=narimasen" "なりません") (0.9793 "=narimaseq" "なりません") (0.9792 "=narimashita" "なりました"))
       (my-round-map
        (approximate-search userid kvs "=narimash"  "h" 0)))

(test* "approximate search 21"
       '((0.9907 "=narimashita" "なりました") (0.9793 "=narimasd" "なりません") (0.9793 "=narimast" "なりました") (0.9793 "=narimasu" "なります"))
       (my-round-map
        (approximate-search userid kvs "=narimashi"  "h" 0)))

(test* "approximate search 22"
       '((1.0 "=natteiru" "なっている"))
       (my-round-map
        (approximate-search userid kvs "=natteiru"  "h" 0)))

(test* "approximate search 23"
       '()
       (my-round-map
        (approximate-search userid kvs "=nateiru"  "h" 0)))


;;-------------------------------------------------------------------
(test-section "henkan (okuri nashi)")

(test* "okuri nashi 1"
       '(("変換" #f "へんかん" j) ("返還" #f "へんかん" j) ("変化" #f "へんか" j) ("返歌" #f "へんか" j))
       (henkan-okuri-nashi userid kvs "henkan" 0))

(test* "okuri nashi 2"
       '(("変化" #f "へんか" j) ("返歌" #f "へんか" j) ("変換" #f "へんかん" j) ("返還" #f "へんかん" j))
       (henkan-okuri-nashi userid kvs "henka" 0))

(test* "okuri nashi 3"
       '(("変換" #f "へんかん" j) ("返還" #f "へんかん" j) ("変換エンジン" #f "へんかんえんじん" j) ("変化" #f "へんか" j) ("返歌" #f "へんか" j))
       (henkan-okuri-nashi userid kvs "henkann" 0))

(test* "okuri nashi 4"
       '(("変換" #f "へんかん" j) ("返還" #f "へんかん" j) ("変化" #f "へんか" j) ("返歌" #f "へんか" j) ("変換エンジン" #f "へんかんえんじん" j))
       (henkan-okuri-nashi userid kvs "hennkan" 0))

(test* "okuri nashi 5"
       '(("変換" #f "へんかん" j) ("返還" #f "へんかん" j) ("変換エンジン" #f "へんかんえんじん" j) ("変化" #f "へんか" j) ("返歌" #f "へんか" j))
       (henkan-okuri-nashi userid kvs "hennkann" 0))

(test* "okuri nashi 6"
       '(("自然言語" #f "しぜんげんご" j) ("自然言語理解" #f "しぜんげんごりかい" j) ("自然言語処理" #f "しぜんげんごしょり" j))
       (henkan-okuri-nashi userid kvs "shizengengo" 0))

(test* "okuri nashi 7"
       '(("自然言語処理" #f "しぜんげんごしょり" j) ("自然言語" #f "しぜんげんご" j) ("自然言語理解" #f "しぜんげんごりかい" j))
       (henkan-okuri-nashi userid kvs "shizengengosyo" 0))

(test* "okuri nashi 8"
       '(("案" #f ">あん" j))
       (henkan-okuri-nashi userid kvs ">an" 0))

(test* "okuri nashi 9"
       '(("案" #f ">あん" j))
       (henkan-okuri-nashi userid kvs ">ann" 0))

(test* "okuri nashi 10"
       '(("デベロッパー" #f "developper" j) ("ディベロッパー" #f "developper" j) ("デベロッパ" #f "developper" j))
       (henkan-okuri-nashi userid kvs "developper" 0))

(test* "okuri nashi 11"
       '(("蟹" #f "かに" j) ("可児" #f "かに" j) ("蠏" #f "かに" j) ("簡易" #f "かんい" j) ("官位" #f "かんい" j) ("冠位" "-十二階" "かんい" j) ("漢医" "漢方医" "かんい" j) ("敢為" #f "かんい" j) ("官医" #f "かんい" j) ("寛衣" #f "かんい" j) ("換位" #f "かんい" j) ("簡意" #f "かんい" j))
       (henkan-okuri-nashi userid kvs "kani" 0))

(test* "okuri nashi 12"
       '(("簡易" #f "かんい" j) ("官位" #f "かんい" j) ("冠位" "-十二階" "かんい" j) ("漢医" "漢方医" "かんい" j) ("敢為" #f "かんい" j) ("官医" #f "かんい" j) ("寛衣" #f "かんい" j) ("換位" #f "かんい" j) ("簡意" #f "かんい" j) ("蟹" #f "かに" j) ("可児" #f "かに" j) ("蠏" #f "かに" j))
       (henkan-okuri-nashi userid kvs "kanni" 0))

(test* "okuri nashi 13"
       '(("蟹" #f "かに" j))
       (henkan-okuri-nashi userid kvs "kani" 1))

(test* "okuri nashi 14"
       '(("先" #f "さき" j) ("崎" #f "さき" j) ("左記" #f "さき" j) ("前" #f "さき" j) ("早紀" #f "さき" j) ("沙樹" #f "さき" j) ("早岐" #f "さき" j) ("沙貴" #f "さき" j) ("咲" #f "さき" j) ("埼" #f "さき" j) ("尖" #f "さき" j) ("嵜" #f "さき" j) ("碕" #f "さき" j) ("早記" #f "さき" j))
       (henkan-okuri-nashi userid kvs "Saki" 0))

(test* "okuri nashi 15"
       '(("確固" #f "かっこ" j) ("括弧" #f "かっこ" j) ("各個" #f "かっこ" j) ("各戸" #f "かっこ" j) ("確乎" #f "かっこ" j) ("羯鼓" "雅楽の打楽器" "かっこ" j) ("格好" #f "かっこ" j) ("『』" #f "かっこ" j) ("【】" #f "かっこ" j) ("［］" #f "かっこ" j) ("〔〕" #f "かっこ" j) ("〈〉" #f "かっこ" j) ("《》" #f "かっこ" j) ("｛｝" #f "かっこ" j) ("「」" #f "かっこ" j) ("（）" #f "かっこ" j) ("‘’" #f "かっこ" j) ("“”" #f "かっこ" j))
       (henkan-okuri-nashi userid kvs "Kakko" 0))

(test* "okuri nashi 16"
       '(("確固" #f "かっこ" j) ("括弧" #f "かっこ" j) ("各個" #f "かっこ" j) ("各戸" #f "かっこ" j) ("確乎" #f "かっこ" j) ("羯鼓" "雅楽の打楽器" "かっこ" j) ("格好" #f "かっこ" j) ("『』" #f "かっこ" j) ("【】" #f "かっこ" j) ("［］" #f "かっこ" j) ("〔〕" #f "かっこ" j) ("〈〉" #f "かっこ" j) ("《》" #f "かっこ" j) ("｛｝" #f "かっこ" j) ("「」" #f "かっこ" j) ("（）" #f "かっこ" j) ("‘’" #f "かっこ" j) ("“”" #f "かっこ" j))
       (henkan-okuri-nashi userid kvs "Ka@ko" 0))

(test* "okuri nashi 17"
       '(("確固" #f "かっこ" j) ("括弧" #f "かっこ" j) ("各個" #f "かっこ" j) ("各戸" #f "かっこ" j) ("確乎" #f "かっこ" j) ("羯鼓" "雅楽の打楽器" "かっこ" j) ("格好" #f "かっこ" j) ("『』" #f "かっこ" j) ("【】" #f "かっこ" j) ("［］" #f "かっこ" j) ("〔〕" #f "かっこ" j) ("〈〉" #f "かっこ" j) ("《》" #f "かっこ" j) ("｛｝" #f "かっこ" j) ("「」" #f "かっこ" j) ("（）" #f "かっこ" j) ("‘’" #f "かっこ" j) ("“”" #f "かっこ" j))
       (henkan-okuri-nashi userid kvs "Ka;ko" 0))

(test* "okuri nashi 18"
       '(("一致" #f "いっち" j) ("イッチ" #f "いっち" j))
       (henkan-okuri-nashi userid kvs "icchi" 0))

(test* "okuri nashi 19"
       '(("一致" #f "いっち" j) ("イッチ" #f "いっち" j))
       (henkan-okuri-nashi userid kvs "i@chi" 0))

(test* "okuri nashi 20"
       '(("一致" #f "いっち" j) ("イッチ" #f "いっち" j))
       (henkan-okuri-nashi userid kvs "i;chi" 0))

(test* "okuri nashi 21"
       '(("ユーザー辞書" #f "ゆーざーじしょ" j))
       (henkan-okuri-nashi userid kvs "Yu-za-jisyo" 0))

(test* "okuri nashi 22"
       '(("ユーザー辞書" #f "ゆーざーじしょ" j))
       (henkan-okuri-nashi userid kvs "Yu:za:jisyo" 0))

(test* "okuri nashi 23"
       '(("ユーザー辞書" #f "ゆーざーじしょ" j))
       (henkan-okuri-nashi userid kvs "Yu'za'jisyo" 0))

(test* "okuri nashi 24"
       '(("組み込み" #f "くみこみ" j) ("組込" #f "くみこみ" j))
       (henkan-okuri-nashi userid kvs "Kumikomu" 0))


;;-------------------------------------------------------------------
(test-section "henkan (okuri nashi reverse)")
(test* "okuri nashi reverse 1"
       '()
       (henkan-okuri-nashi userid kvs "Hnkan" 0))

(test* "okuri nashi reverse 2"
       '()
       (henkan-okuri-nashi userid kvs "Hnka" 0))

(test* "okuri nashi reverse 3"
       '()
       (henkan-okuri-nashi userid kvs "Hnkann" 0))

(test* "okuri nashi reverse 4"
       '()
       (henkan-okuri-nashi userid kvs "Hnnkan" 0))

(test* "okuri nashi reverse 5"
       '()
       (henkan-okuri-nashi userid kvs "Hnnkann" 0))

(test* "okuri nashi reverse 6"
       '(("変換" #f "へんかん" j) ("返還" #f "へんかん" j))
       (henkan-okuri-nashi userid kvs "enkann" 0))

(test* "okuri nashi reverse 7"
       '(("自然言語" #f "しぜんげんご" j))
       (henkan-okuri-nashi userid kvs "Hizengengo" 0))

(test* "okuri nashi reverse 8"
       '(("自然言語処理" #f "しぜんげんごしょり" j))
       (henkan-okuri-nashi userid kvs "Hizengengosyori" 0))


;;-------------------------------------------------------------------
(test-section "henkan (okuri nashi and number)")

(test* "okuri nashi and number 1"
       '(("2行目" #f "#ぎょうめ" n) ("２行目" #f "#ぎょうめ" n))
       (henkan-okuri-nashi-and-number userid kvs "2gyoume" 0))

(test* "okuri nashi and number 2"
       '(("10行目" #f "#ぎょうめ" n) ("１０行目" #f "#ぎょうめ" n))
       (henkan-okuri-nashi-and-number userid kvs "10gyoume" 0))

(test* "okuri nashi and number 3"
       '(("100回目" #f "#かいめ" n) ("百回目" #f "#かいめ" n))
       (henkan-okuri-nashi-and-number userid kvs "100kaime" 0))

(test* "okuri nashi and number 4"
       '(("３月３日" #f "#がつ#か" n) ("3月3日" #f "#がつ#か" n) ("三月三日" #f "#がつ#か" n) ("三月３日" #f "#がつ#か" n))
       (henkan-okuri-nashi-and-number userid kvs "3gatu3ka" 0))

(test* "okuri nashi and number 5"
       '(("１２月３１日" #f "#がつ#にち" n) ("12月31日" #f "#がつ#にち" n) ("一二月三一日" #f "#がつ#にち" n) ("一二月３１日" #f "#がつ#にち" n))
       (henkan-okuri-nashi-and-number userid kvs "12gatu31nichi" 0))

(test* "okuri nashi and number 6"
       '(("１〜１０" #f "#から#" n))
       (henkan-okuri-nashi-and-number userid kvs "1kara10" 0))

(test* "okuri nashi and number 7"
       '(("１０００〜２０００" #f "#から#" n))
       (henkan-okuri-nashi-and-number userid kvs "1000kara2000" 0))

(test* "okuri nashi and number 8"
       '(("２０１１年" #f "#ねん" n) ("2011年" #f "#ねん" n) ("二千十一年" #f "#ねん" n) ("二〇一一年" #f "#ねん" n))
       (henkan-okuri-nashi-and-number userid kvs "2011nen" 0))

(test* "okuri nashi and number 9"
       '(("１００００年" #f "#ねん" n) ("10000年" #f "#ねん" n) ("一万年" #f "#ねん" n) ("一〇〇〇〇年" #f "#ねん" n))
       (henkan-okuri-nashi-and-number userid kvs "10000nen" 0))

(test* "okuri nashi and number 10"
       '(("2011年10月10日" #f "#ねん#がつ#にち" n) ("２０１１年１０月１０日" #f "#ねん#がつ#にち" n))
       (henkan-okuri-nashi-and-number userid kvs "2011nen10gatu10ka" 0))

(test* "okuri nashi and number 11"
       '()
       (henkan-okuri-nashi-and-number userid kvs "2011nen10gatu" 0))

(test* "okuri nashi and number 12"
       '(("１０月１０日" #f "#がつ#か" n) ("10月10日" #f "#がつ#か" n) ("一〇月一〇日" #f "#がつ#か" n) ("一〇月１０日" #f "#がつ#か" n))
       (henkan-okuri-nashi-and-number userid kvs "10gatu10ka" 0))

(test* "okuri nashi and number 13"
       '()
       (henkan-okuri-nashi-and-number userid kvs "10ka" 0))

(test* "okuri nashi and number 14"
       '()
       (henkan-okuri-nashi-and-number userid kvs "2011nen10ka" 0))




;;-------------------------------------------------------------------
(test-section "henkan (number)")

(test* "number 1"
       '(("１" nil "1" n) ("1" nil "1" n) ("一" nil "1" n) ("一" nil "1" n))
       (henkan-number kvs "1"))

(test* "number 2"
       '(("１０" nil "10" n) ("10" nil "10" n) ("一〇" nil "10" n) ("十" nil "10" n))
       (henkan-number kvs "10"))

(test* "number 3"
       '(("１００" nil "100" n) ("100" nil "100" n) ("一〇〇" nil "100" n) ("百" nil "100" n))
       (henkan-number kvs "100"))

(test* "number 4"
       '(("１２３４５６７８９０" nil "1234567890" n) ("1234567890" nil "1234567890" n) ("一二三四五六七八九〇" nil "1234567890" n) ("十二億三千四百五十六万七千八百九十" nil "1234567890" n))
       (henkan-number kvs "1234567890"))

(test* "number 5"
       '(("１２３４５６７８９０" nil "1234567890" n) ("1234567890" nil "1234567890" n) ("一二三四五六七八九〇" nil "1234567890" n) ("十二億三千四百五十六万七千八百九十" nil "1234567890" n))
       (henkan-number kvs "1234567890"))


;;-------------------------------------------------------------------
(test-section "henkan (okuri ari)")

(test* "approximate search 1"
       '((1.0 "henkaS" "Cへんかs"))
       (my-round-map
        (approximate-search userid kvs "henkaS" "K" 0)))

(test* "approximate search 2"
       '((0.9762 "henkaS" "Cへんかs"))
       (my-round-map
        (approximate-search userid kvs "henkanS" "K" 0)))

(test* "approximate search 3"
       '((1.0 "okonaU" "Cおこなu"))
       (my-round-map
        (approximate-search userid kvs "okonaU" "K" 0)))

(test* "approximate search 4"
       '()
       (my-round-map
        (approximate-search userid kvs "okonU" "K" 0)))

(test* "approximate search 5"
       '((1.0 "eR" "Cえr"))
       (my-round-map
        (approximate-search userid kvs "eR" "K" 0)))

(test* "approximate search 6"
       '((1.0 "henkaS" "Cへんかs"))
       (my-round-map
        (approximate-search userid kvs "henkaS" "K" 1)))

(test* "approximate search 7"
       '((1.0 "henkaS" "Cへんかs"))
       (my-round-map
        (approximate-search userid kvs "henkaS" "K" 2)))


(test* "okuri ari 1"
       '(("私は" #f "わたしh" j))
       (henkan-okuri-ari userid kvs "watashiHa" 0 :normal))

(test* "okuri ari 2"
       '(("変化する" #f "へんかs" j))
       (henkan-okuri-ari userid kvs "henkaSuru" 0 :normal))

(test* "okuri ari 3"
       '(("変化する" #f "へんかs" j))
       (henkan-okuri-ari userid kvs "HenkaSuru" 0 :normal))

(test* "okuri ari 4"
       '(("変化する" #f "へんかs" j))
       (henkan-okuri-ari userid kvs "HenkaSURU" 0 :normal))

(test* "okuri ari 5"
       '(("変化する" #f "へんかs" j))
       (henkan-okuri-ari userid kvs "HenkaSuRu" 0 :normal))

(test* "okuri ari 6"
       '(("行う" #f "おこなu" j) ("行なう" "※送り位置補正" "おこなu" j))
       (henkan-okuri-ari userid kvs "okonaU" 0 :normal))

(test* "okuri ari 7"
       '(("行う" #f "おこなu" j) ("行なう" "※送り位置補正" "おこなu" j))
       (henkan-okuri-ari userid kvs "OkonaU" 0 :normal))

(test* "okuri ari 8"
       '()
       (henkan-okuri-ari userid kvs "okonU" 0 :normal))

(test* "okuri ari 9"
       '(("見る" #f "みr" j) ("観る" "(字義:みわたす)" "みr" j) ("視る" "(字義:じっとみる)" "みr" j) ("診る" "(diagnose) 患者を診る" "みr" j) ("看る" "(nurse) 病母を看る" "みr" j) ("觀る" "「観」の旧字" "みr" j))
       (henkan-okuri-ari userid kvs "miRu" 0 :normal))

(test* "okuri ari 10"
       '(("見" #f "みr" j) ("観" "(字義:みわたす)" "みr" j) ("視" "(字義:じっとみる)" "みr" j) ("診" "(diagnose) 患者を診る" "みr" j) ("看" "(nurse) 病母を看る" "みr" j) ("觀" "「観」の旧字" "みr" j))
       (henkan-okuri-ari userid kvs "miR" 0 :normal))

(test* "okuri ari 11"
       '(("見る" #f "みr" j))
       (henkan-okuri-ari userid kvs "miRu" 1 :normal))

(test* "okuri ari 12"
       '(("見る" #f "みr" j) ("観る" "(字義:みわたす)" "みr" j))
       (henkan-okuri-ari userid kvs "miRu" 2 :normal))

(test* "okuri ari 13"
       '(("変化すんじゃ" #f "へんかs" j) ("変化すぬんあ" #f "へんかs" j))
       (henkan-okuri-ari userid kvs "henkaSunja" 4 :normal))

(test* "okuri ari 14"
       '(("変化すぬんあ" #f "へんかs" j) ("変化すんじゃ" #f "へんかs" j))
       (henkan-okuri-ari userid kvs "henkaSunja" 4 :azik))

(test* "okuri ari 15"
       '(("変化すること" #f "へんかs" j))
       (henkan-okuri-ari userid kvs "henkaSrkt" 2 :normal))

(test* "okuri ari 16"
       '(("変化すること" #f "へんかs" j))
       (henkan-okuri-ari userid kvs "henkaSrkt" 2 :azik))

(test* "okuri ari 17"
       '(("変化するかも" #f "へんかs" j))
       (henkan-okuri-ari userid kvs "henkaSrkm" 2 :normal))

(test* "okuri ari 18"
       '(("変化するかも" #f "へんかs" j))
       (henkan-okuri-ari userid kvs "henkaSrkm" 2 :azik))

(test* "okuri ari 19"
       '(("勝つ" #f "かt" j) ("買つ" #f "かt" j) ("飼つ" #f "かt" j) ("刈つ" "(crop)草を刈る" "かt" j))
       (henkan-okuri-ari userid kvs "kaTu" 0 :normal))

(test* "okuri ari 20"
       '(("勝った" #f "かt" j) ("買った" #f "かt" j) ("飼った" #f "かt" j) ("刈った" "(crop)草を刈る" "かt" j))
       (henkan-okuri-ari userid kvs "kaTta" 0 :normal))

(test* "okuri ari 21"
       '(("勝った" #f "か`" j) ("買った" #f "か`" j) ("飼った" #f "か`" j) ("刈った" "(crop)草を刈る" "か`" j))
       (henkan-okuri-ari userid kvs "ka`ta" 0 :normal))

(test* "okuri ari 22"
       '(("勝った" #f "か`" j) ("買った" #f "か`" j) ("飼った" #f "か`" j) ("刈った" "(crop)草を刈る" "か`" j))
       (henkan-okuri-ari userid kvs "ka`ta" 0 :azik))

;; 送り仮名が "R" で始っているのに、"t" や "`" もマッチしている理由は、送り仮名の開始子音1文字まで含めたJaro-WInkler distanceで候補で並べており、送り仮名が違うからといって排除しない方針をとっているため。
;; それにより送り仮名のミスタイプの許容をしている。
(test* "okuri ari 23"
       '(("ブログりました" #f "ぶろぐr" j) ("ブログりました" #f "ぶろぐ+" j) ("ブログりました" #f "ぶろぐt" j) ("ブログりました" #f "ぶろぐ`" j))
       (henkan-okuri-ari userid kvs "buroguRimashita" 0 :normal))

(test* "okuri ari 24"
       '(("ブログった" #f "ぶろぐt" j) ("ブログった" #f "ぶろぐ+" j) ("ブログった" #f "ぶろぐr" j) ("ブログった" #f "ぶろぐ`" j))
       (henkan-okuri-ari userid kvs "buroguTta" 0 :normal))

;;-------------------------------------------------------------------
(test-section "henkan hiragana")

(test* "hiragana 1"
       '(("あいうえお" #f "aiueo" h) ("あいうえお" #f "aiueo" h) ("アイウエオ" #f "aiueo" k))
       (henkan-hiragana userid kvs "aiueo" :normal))

(test* "hiragana 2"
       '(("の" #f "no" h) ("ノ" #f "no" k))
       (henkan-hiragana userid kvs "no" :normal))

(test* "hiragana 3"
       '(("b" #f "b" j))
       (henkan-hiragana userid kvs "b" :normal))

(test* "hiragana 4"
       '(("if" #f "if" j))
       (henkan-hiragana userid kvs "if" :normal))

(test* "hiragana 5"
       '(("ぁぃぅぇぉゃゅょ" #f "lalilulelolyalyulyo" h) ("ァィゥェォャュョ" #f "lalilulelolyalyulyo" k))
       (henkan-hiragana userid kvs "lalilulelolyalyulyo" :normal))

(test* "hiragana 6"
       '(("ぁぃぅぇぉゃゅょ" #f "xaxixuxexoxyaxyuxyo" h) ("ァィゥェォャュョ" #f "xaxixuxexoxyaxyuxyo" k) ("しゃししゅしぇしょゃゅょ" #f "xaxixuxexoxyaxyuxyo" h) ("シャシシュシェショャュョ" #f "xaxixuxexoxyaxyuxyo" k))
       (henkan-hiragana userid kvs "xaxixuxexoxyaxyuxyo" :normal))

(test* "hiragana 7"
       '(("することです" #f "srktds" h) ("スルコトデス" #f "srktds" k))
       (henkan-hiragana userid kvs "srktds" :normal))

(test* "hiragana 8"
       '(("することです" #f "srktds" h) ("スルコトデス" #f "srktds" k))
       (henkan-hiragana userid kvs "srktds" :azik))

(test* "hiragana 9"
       '(("んんあんはんわんぱ" #f "nqanhanwanpa" h) ("ンンアンハンワンパ" #f "nqanhanwanpa" k) ("ないあぬうあねいあのうあ" #f "nqanhanwanpa" h) ("ナイアヌウアネイアノウア" #f "nqanhanwanpa" k))
       (henkan-hiragana userid kvs "nqanhanwanpa" :normal))

(test* "hiragana 10"
       '(("ないあぬうあねいあのうあ" #f "nqanhanwanpa" h) ("ナイアヌウアネイアノウア" #f "nqanhanwanpa" k) ("んんあんはんわんぱ" #f "nqanhanwanpa" h) ("ンンアンハンワンパ" #f "nqanhanwanpa" k))
       (henkan-hiragana userid kvs "nqanhanwanpa" :azik))

;;-------------------------------------------------------------------
(test-section "henkan hiragana-phrase")
(test* "hiragana-phrase 1"
       '(("した" #f "shita" h) ("したい" #f "shita" h) ("した" #f "shita" h) ("シタ" #f "shita" k))
       (henkan-hiragana userid kvs "shita" :normal))

(test* "hiragana-phrase 2"
       '(("shit" #f "shit" j))
       (henkan-hiragana userid kvs "shit" :normal))

(test* "hiragana-phrase 3"
       '(("したい" #f "shitai" h) ("した" #f "shitai" h) ("したい" #f "shitai" h) ("シタイ" #f "shitai" k))
       (henkan-hiragana userid kvs "shitai" :normal))

(test* "hiragana-phrase 4"
       '(("したい" #f "shitaii" h) ("したいい" #f "shitaii" h) ("シタイイ" #f "shitaii" k))
       (henkan-hiragana userid kvs "shitaii" :normal))

(test* "hiragana-phrase 5"
       '(("なります" #f "narimasu" h) ("なりません" #f "narimasu" h) ("なりました" #f "narimasu" h) ("なります" #f "narimasu" h) ("ナリマス" #f "narimasu" k))
       (henkan-hiragana userid kvs "narimasu" :normal))

(test* "hiragana-phrase 6"
       '(("なりました" #f "narimashita" h) ("なりました" #f "narimashita" h) ("ナリマシタ" #f "narimashita" k))
       (henkan-hiragana userid kvs "narimashita" :normal))

(test* "hiragana-phrase 7"
       '(("なりません" #f "narimasen" h) ("なりません" #f "narimasen" h) ("ナリマセン" #f "narimasen" k))
       (henkan-hiragana userid kvs "narimasen" :normal))

(test* "hiragana-phrase 8"
       '(("なりました" #f "narimashitaga" h) ("なりましたが" #f "narimashitaga" h) ("ナリマシタガ" #f "narimashitaga" k))
       (henkan-hiragana userid kvs "narimashitaga" :normal))

(test* "hiragana-phrase 9"
       '(("なりました" #f "narimashitanode" h) ("なりましたので" #f "narimashitanode" h) ("ナリマシタノデ" #f "narimashitanode" k))
       (henkan-hiragana userid kvs "narimashitanode" :normal))

(test* "hiragana-phrase 10"
       '(("なります" #f "narimasumai" h) ("なりますまい" #f "narimasumai" h) ("ナリマスマイ" #f "narimasumai" k))
       (henkan-hiragana userid kvs "narimasumai" :normal))

(test* "hiragana-phrase 11"
       '(("は" #f "ha" h) ("ハ" #f "ha" k))
       (henkan-hiragana userid kvs "ha" :normal))

(test* "hiragana-phrase 12"
       '((("あ" #f "a" h) ("ア" #f "a" k))
         (("あい" #f "ai" h) ("あい" #f "ai" h) ("アイ" #f "ai" k))
         (("あいう" #f "aiu" h) ("あいう" #f "aiu" h) ("アイウ" #f "aiu" k))
         (("あいうえ" #f "aiue" h) ("あいうえ" #f "aiue" h) ("アイウエ" #f "aiue" k))
         (("あいうえお" #f "aiueo" h) ("あいうえお" #f "aiueo" h) ("アイウエオ" #f "aiueo" k))
         (("あいうえおか" #f "aiueoka" h) ("あいうえおかき" #f "aiueoka" h) ("あいうえおか" #f "aiueoka" h) ("アイウエオカ" #f "aiueoka" k))
         (("あいうえおかき" #f "aiueokaki" h) ("あいうえおか" #f "aiueokaki" h) ("あいうえおかき" #f "aiueokaki" h) ("アイウエオカキ" #f "aiueokaki" k))
         (("あいうえおかき" #f "aiueokakiku" h) ("あいうえおかきく" #f "aiueokakiku" h) ("アイウエオカキク" #f "aiueokakiku" k))
         (("あいうえおかきくけ" #f "aiueokakikuke" h) ("アイウエオカキクケ" #f "aiueokakikuke" k))
         (("あいうえおかきくけこ" #f "aiueokakikukeko" h) ("アイウエオカキクケコ" #f "aiueokakikukeko" k)))
       (map
        (lambda (query)
          (henkan-hiragana userid kvs   query   :normal))
        '("a" "ai" "aiu" "aiue" "aiueo" "aiueoka" "aiueokaki" "aiueokakiku" "aiueokakikuke" "aiueokakikukeko")))

(test* "hiragana-phrase 13"
       '(("なている" #f "nateiru" h) ("ナテイル" #f "nateiru" k))
       (henkan-hiragana userid kvs "nateiru" :normal))


;;-------------------------------------------------------------------
(test-section "henkan alphabet")

(test* "alphabet 1"
       '(("ａｂｃｚＡＢＣＺ" #f "abczABCZ" z) ("abczABCZ" #f "abczABCZ" l))
       (henkan-alphabet kvs "abczABCZ"))
(test* "alphabet 2"
       '(("！ａｂｃｄｅｆｇ｝" #f "!abcdefg}" z) ("!abcdefg}" #f "!abcdefg}" l))
       (henkan-alphabet kvs "!abcdefg}"))
(test* "alphabet 3"
       '(("ｍａｉｌ＠ｅｘａｍｐｌｅ．ｃｏｍ" #f "mail@example.com" z) ("mail@example.com" #f "mail@example.com" l))
       (henkan-alphabet kvs "mail@example.com"))
(test* "alphabet 4"
       '(("ｈｔｔｐ：／／ｗｗｗ．ｅｘａｍｐｌｅ．ｃｏｍ／？ａｒｇ１＝ａａａ＆ａｒｇ１＝ｂｂｂ＃ｔａｇ" #f "http://www.example.com/?arg1=aaa&arg1=bbb#tag" z) ("http://www.example.com/?arg1=aaa&arg1=bbb#tag" #f "http://www.example.com/?arg1=aaa&arg1=bbb#tag" l))
       (henkan-alphabet kvs "http://www.example.com/?arg1=aaa&arg1=bbb#tag"))
(test* "alphabet 5"
       '(("（）｛｝［］" #f "(){}[]" z) ("(){}[]" #f "(){}[]" l))
       (henkan-alphabet kvs "(){}[]"))

       
;;-------------------------------------------------------------------
(test-section "henkan non-kanji")

(test* "non-kanji 1"
       '(("｛" #f "{" j))
       (henkan-non-kanji userid kvs "{"))

(test* "non-kanji 2"
       '(("！" #f "!" j) ("感嘆符" #f "!" j))
       (henkan-non-kanji userid kvs "!"))

(test* "non-kanji 3"
       '(("／" #f "/" j) ("÷" #f "/" j))
       (henkan-non-kanji userid kvs "/"))

(test* "non-kanji 4"
       '(("≠" #f "!=" j))
       (henkan-non-kanji userid kvs "!="))

(test* "non-kanji 5"
       '(("．" #f "." j) ("・" #f "." j) ("。" #f "." j) ("…" "..." "." j))
       (henkan-non-kanji userid kvs "."))


;;-------------------------------------------------------------------
(test-section "sekka henkan toplevel(1)")

(test* "henkan toplevel 1"
       '(("＊" #f "*" j 0) ("※" #f "*" j 1) ("×" #f "*" j 2) ("＊" #f "*" z 3) ("*" #f "*" l 4))
       (sekka-henkan userid kvs "*" 0 :normal))

(test* "henkan toplevel 2"
       '(("しぜんげんごりか" #f "shizengengorika" h 0) ("シゼンゲンゴリカ" #f "shizengengorika" k 1) ("しぜにぇにょりか" #f "shizengengorika" h 2) ("シゼニェニョリカ" #f "shizengengorika" k 3) ("ｓｈｉｚｅｎｇｅｎｇｏｒｉｋａ" #f "shizengengorika" z 4) ("shizengengorika" #f "shizengengorika" l 5) ("自然言語理解" #f "しぜんげんごりかい" j 6) ("自然言語" #f "しぜんげんご" j 7) ("自然言語処理" #f "しぜんげんごしょり" j 8))
       (sekka-henkan userid kvs "shizengengorika" 0 :normal))

(test* "henkan toplevel 3"
       '(("自然言語理解" #f "しぜんげんごりかい" j 0) ("自然言語" #f "しぜんげんご" j 1) ("自然言語処理" #f "しぜんげんごしょり" j 2) ("しぜんげんごりか" #f "shizengengorika" h 3) ("シゼンゲンゴリカ" #f "shizengengorika" k 4) ("しぜにぇにょりか" #f "shizengengorika" h 5) ("シゼニェニョリカ" #f "shizengengorika" k 6) ("Ｓｈｉｚｅｎｇｅｎｇｏｒｉｋａ" #f "Shizengengorika" z 7) ("Shizengengorika" #f "Shizengengorika" l 8))
       (sekka-henkan userid kvs "Shizengengorika" 0 :normal))

(test* "henkan toplevel 4"
       '(("変化する" #f "へんかs" j 0) ("へんかする" #f "henkasuru" h 1) ("ヘンカスル" #f "henkasuru" k 2) ("へにんあする" #f "henkasuru" h 3) ("ヘニンアスル" #f "henkasuru" k 4) ("ｈｅｎｋａＳｕｒｕ" #f "henkaSuru" z 5) ("henkaSuru" #f "henkaSuru" l 6))
       (sekka-henkan userid kvs "henkaSuru" 0 :normal))

(test* "henkan toplevel 5"
       '(("変換" #f "へんかん" j 0) ("返還" #f "へんかん" j 1) ("変化" #f "へんか" j 2) ("返歌" #f "へんか" j 3) ("へんかん" #f "henkan" h 4) ("ヘンカン" #f "henkan" k 5) ("へにんあん" #f "henkan" h 6) ("ヘニンアン" #f "henkan" k 7) ("Ｈｅｎｋａｎ" #f "Henkan" z 8) ("Henkan" #f "Henkan" l 9))
       (sekka-henkan userid kvs "Henkan" 0 :normal))

(test* "henkan toplevel 6"
       '(("へんかん" #f "henkan" h 0) ("ヘンカン" #f "henkan" k 1) ("へにんあん" #f "henkan" h 2) ("ヘニンアン" #f "henkan" k 3) ("ＨＥｎｋａｎ" #f "HEnkan" z 4) ("HEnkan" #f "HEnkan" l 5))
       (sekka-henkan userid kvs "HEnkan" 0 :normal))

(test* "henkan toplevel 7"
       '(("へんかん" #f "henkan" h 0) ("ヘンカン" #f "henkan" k 1) ("へにんあん" #f "henkan" h 2) ("ヘニンアン" #f "henkan" k 3) ("ＨＥＮｋａｎ" #f "HENkan" z 4) ("HENkan" #f "HENkan" l 5))
       (sekka-henkan userid kvs "HENkan" 0 :normal))

(test* "henkan toplevel 8"
       '(("コーヒー" #f "こーひー" j 0) ("こーひー" #f "ko-hi-" h 1) ("コーヒー" #f "ko-hi-" k 2) ("Ｋｏ－ｈｉ－" #f "Ko-hi-" z 3) ("Ko-hi-" #f "Ko-hi-" l 4))
       (sekka-henkan userid kvs "Ko-hi-" 0 :normal))

(test* "henkan toplevel 9"
       '(("得る" #f "えr" j 0) ("獲る" "NB:「とr」と同形" "えr" j 1) ("選る" "NB:「よr」「すぐr」と同形" "えr" j 2) ("える" #f "eru" h 3) ("エル" #f "eru" k 4) ("ｅＲｕ" #f "eRu" z 5) ("eRu" #f "eRu" l 6))
       (sekka-henkan userid kvs "eRu" 0 :normal))

(test* "henkan toplevel 10"
       '(("得る" #f "えr" j 0) ("獲る" "NB:「とr」と同形" "えr" j 1) ("選る" "NB:「よr」「すぐr」と同形" "えr" j 2) ("える" #f "eru" h 3) ("エル" #f "eru" k 4) ("ＥＲｕ" #f "ERu" z 5) ("ERu" #f "ERu" l 6))
       (sekka-henkan userid kvs "ERu" 0 :normal))

(test* "henkan toplevel 11"
       '(("を" #f "wo" h 0) ("ヲ" #f "wo" k 1) ("ｗｏ" #f "wo" z 2) ("wo" #f "wo" l 3) ("小" #f "を" j 4) ("緒" #f "を" j 5) ("雄" #f "を" j 6) ("男" #f "を" j 7) ("牡" #f "を" j 8) ("尾" #f "を" j 9) ("悪" #f "を" j 10) ("汚" #f "を" j 11) ("惡" "「悪」の旧字(人名用漢字)" "を" j 12))
       (sekka-henkan userid kvs "wo" 0 :normal))

(test* "henkan toplevel 12"
       '(("Ｓ" #f "S" z 0) ("S" #f "S" l 1))
       (sekka-henkan userid kvs "S" 0 :normal))

(test* "henkan toplevel 13"
       '(("Ｈ" #f "H" z 0) ("H" #f "H" l 1))
       (sekka-henkan userid kvs "H" 0 :normal))

(test* "henkan toplevel 14"
       '(("ｇｉｔＨｕＢ" #f "gitHuB" z 0) ("gitHuB" #f "gitHuB" l 1))
       (sekka-henkan userid kvs "gitHuB" 0 :normal))

(test* "henkan toplevel 15"
       '(("ＣｈａｎｇｅＬｏｇ" #f "ChangeLog" z 0) ("ChangeLog" #f "ChangeLog" l 1))
       (sekka-henkan userid kvs "ChangeLog" 0 :normal))

(test* "henkan toplevel 16"
       '(("訳" #f "わけ" j 0) ("和気" "地名" "わけ" j 1) ("理由" "当て字" "わけ" j 2) ("分け" #f "わけ" j 3) ("分" #f "わけ" j 4) ("譯" "「訳」の旧字" "わけ" j 5) ("戯奴" #f "わけ" j 6) ("わけ" #f "wake" h 7) ("ワケ" #f "wake" k 8) ("Ｗａｋｅ" #f "Wake" z 9) ("Wake" #f "Wake" l 10))
       (sekka-henkan userid kvs "Wake" 0 :normal))

(test* "henkan toplevel 17"
       '(("合う" "(一致) 話が合う" "あu" j 0) ("会う" "人と会う" "あu" j 1) ("遭う" "(偶然、特によくないことにあう) 事故に遭う" "あu" j 2) ("逢う" "(人と|運命的にあう) 巡り逢う" "あu" j 3) ("遇う" "≒遭う" "あu" j 4) ("會う" "「会」の旧字" "あu" j 5) ("あう" #f "au" h 6) ("アウ" #f "au" k 7) ("ＡＵ" #f "AU" z 8) ("AU" #f "AU" l 9))
       (sekka-henkan userid kvs "AU" 0 :normal))

(test* "henkan toplevel 18"
       '(("＊" #f "*" j 0) ("※" #f "*" j 1) ("×" #f "*" j 2) ("＊" #f "*" z 3) ("*" #f "*" l 4))
       (sekka-henkan userid kvs "*" 1 :normal))

(test* "henkan toplevel 19"
       '(("しぜんげんごりか" #f "shizengengorika" h 0) ("シゼンゲンゴリカ" #f "shizengengorika" k 1) ("しぜにぇにょりか" #f "shizengengorika" h 2) ("シゼニェニョリカ" #f "shizengengorika" k 3) ("ｓｈｉｚｅｎｇｅｎｇｏｒｉｋａ" #f "shizengengorika" z 4) ("shizengengorika" #f "shizengengorika" l 5) ("自然言語理解" #f "しぜんげんごりかい" j 6))
       (sekka-henkan userid kvs "shizengengorika" 1 :normal))

(test* "henkan toplevel 20"
       '(("自然言語理解" #f "しぜんげんごりかい" j 0) ("しぜんげんごりか" #f "shizengengorika" h 1) ("シゼンゲンゴリカ" #f "shizengengorika" k 2) ("しぜにぇにょりか" #f "shizengengorika" h 3) ("シゼニェニョリカ" #f "shizengengorika" k 4) ("Ｓｈｉｚｅｎｇｅｎｇｏｒｉｋａ" #f "Shizengengorika" z 5) ("Shizengengorika" #f "Shizengengorika" l 6))
       (sekka-henkan userid kvs "Shizengengorika" 1 :normal))

(test* "henkan toplevel 21"
       '(("合う" "(一致) 話が合う" "あu" j 0) ("あう" #f "au" h 1) ("アウ" #f "au" k 2) ("ＡＵ" #f "AU" z 3) ("AU" #f "AU" l 4))
       (sekka-henkan userid kvs "AU" 1 :normal))

(test* "henkan toplevel 22"
       '(("いっち" #f "i@chi" h 0) ("イッチ" #f "i@chi" k 1) ("ｉ＠ｃｈｉ" #f "i@chi" z 2) ("i@chi" #f "i@chi" l 3) ("一致" #f "いっち" j 4))
       (sekka-henkan userid kvs "i@chi" 1 :normal))

(test* "henkan toplevel 23"
       '(("一致" #f "いっち" j 0) ("いっち" #f "i@chi" h 1) ("イッチ" #f "i@chi" k 2) ("Ｉ＠ｃｈｉ" #f "I@chi" z 3) ("I@chi" #f "I@chi" l 4))
       (sekka-henkan userid kvs "I@chi" 1 :normal))

(test* "henkan toplevel 24"
       '(("かった" #f "ka@ta" h 0) ("カッタ" #f "ka@ta" k 1) ("ｋａ＠ｔａ" #f "ka@ta" z 2) ("ka@ta" #f "ka@ta" l 3))
       (sekka-henkan userid kvs "ka@ta" 1 :normal))

(test* "henkan toplevel 25"
       '(("勝った" #f "か`" j 0) ("かった" #f "ka@ta" h 1) ("カッタ" #f "ka@ta" k 2) ("ｋａ｀ｔａ" #f "ka`ta" z 3) ("ka`ta" #f "ka`ta" l 4))
       (sekka-henkan userid kvs "ka`ta" 1 :normal))

(test* "henkan toplevel 26"
       '(("確固" #f "かっこ" j 0) ("かっこ" #f "kakko" h 1) ("カッコ" #f "kakko" k 2) ("Ｋａｋｋｏ" #f "Kakko" z 3) ("Kakko" #f "Kakko" l 4))
       (sekka-henkan userid kvs "Kakko" 1 :normal))

(test* "henkan toplevel 27"
       '(("確固" #f "かっこ" j 0) ("かっこ" #f "ka@ko" h 1) ("カッコ" #f "ka@ko" k 2) ("Ｋａ＠ｋｏ" #f "Ka@ko" z 3) ("Ka@ko" #f "Ka@ko" l 4))
       (sekka-henkan userid kvs "Ka@ko" 1 :normal))

(test* "henkan toplevel 28"
       '(("かっこ" #f "ka;ko" h 0) ("カッコ" #f "ka;ko" k 1) ("ｋａ；ｋｏ" #f "ka;ko" z 2) ("ka;ko" #f "ka;ko" l 3) ("確固" #f "かっこ" j 4))
       (sekka-henkan userid kvs "ka;ko" 1 :normal))

(test* "henkan toplevel 29"
       '(("確固" #f "かっこ" j 0) ("かっこ" #f "ka;ko" h 1) ("カッコ" #f "ka;ko" k 2) ("Ｋａ；ｋｏ" #f "Ka;ko" z 3) ("Ka;ko" #f "Ka;ko" l 4))
       (sekka-henkan userid kvs "Ka;ko" 1 :normal))

(test* "henkan toplevel 30"
       '(("100回目" #f "#かいめ" n 0) ("百回目" #f "#かいめ" n 1) ("１００ｋａｉｍｅ" #f "100kaime" z 2) ("100kaime" #f "100kaime" l 3))
       (sekka-henkan userid kvs "100kaime" 0 :normal))

(test* "henkan toplevel 31"
       '(("はんかん" #f "hnkan" h 0) ("ハンカン" #f "hnkan" k 1) ("Ｈｎｋａｎ" #f "Hnkan" z 2) ("Hnkan" #f "Hnkan" l 3))
       (sekka-henkan userid kvs "Hnkan" 0 :normal))

(test* "henkan toplevel 32"
       '(("はんか" #f "hnka" h 0) ("ハンカ" #f "hnka" k 1) ("Ｈｎｋａ" #f "Hnka" z 2) ("Hnka" #f "Hnka" l 3))
       (sekka-henkan userid kvs "Hnka" 0 :normal))

(test* "henkan toplevel 33"
       '(("はんかん" #f "hnkann" h 0) ("ハンカン" #f "hnkann" k 1) ("Ｈｎｋａｎｎ" #f "Hnkann" z 2) ("Hnkann" #f "Hnkann" l 3))
       (sekka-henkan userid kvs "Hnkann" 0 :normal))

(test* "henkan toplevel 34"
       '(("はんにんあん" #f "hnnkan" h 0) ("ハンニンアン" #f "hnnkan" k 1) ("Ｈｎｎｋａｎ" #f "Hnnkan" z 2) ("Hnnkan" #f "Hnnkan" l 3))
       (sekka-henkan userid kvs "Hnnkan" 0 :normal))

(test* "henkan toplevel 35"
       '(("はんにんあん" #f "hnnkann" h 0) ("ハンニンアン" #f "hnnkann" k 1) ("Ｈｎｎｋａｎｎ" #f "Hnnkann" z 2) ("Hnnkann" #f "Hnnkann" l 3))
       (sekka-henkan userid kvs "Hnnkann" 0 :normal))

(test* "henkan toplevel 36"
       '(("変換" #f "へんかん" j 0) ("返還" #f "へんかん" j 1) ("えんかん" #f "enkann" h 2) ("エンカン" #f "enkann" k 3) ("えにんあん" #f "enkann" h 4) ("エニンアン" #f "enkann" k 5) ("Ｅｎｋａｎｎ" #f "Enkann" z 6) ("Enkann" #f "Enkann" l 7))
       (sekka-henkan userid kvs "Enkann" 0 :normal))

(test* "henkan toplevel 37"
       '(("自然言語" #f "しぜんげんご" j 0) ("ひぜんげんご" #f "hizengengo" h 1) ("ヒゼンゲンゴ" #f "hizengengo" k 2) ("ひぜにぇにょ" #f "hizengengo" h 3) ("ヒゼニェニョ" #f "hizengengo" k 4) ("Ｈｉｚｅｎｇｅｎｇｏ" #f "Hizengengo" z 5) ("Hizengengo" #f "Hizengengo" l 6))
       (sekka-henkan userid kvs "Hizengengo" 0 :normal))

(test* "henkan toplevel 38"
       '(("自然言語処理" #f "しぜんげんごしょり" j 0) ("ひぜんげんごしょり" #f "hizengengosyori" h 1) ("ヒゼンゲンゴショリ" #f "hizengengosyori" k 2) ("ひぜにぇにょしょり" #f "hizengengosyori" h 3) ("ヒゼニェニョショリ" #f "hizengengosyori" k 4) ("Ｈｉｚｅｎｇｅｎｇｏｓｙｏｒｉ" #f "Hizengengosyori" z 5) ("Hizengengosyori" #f "Hizengengosyori" l 6))
       (sekka-henkan userid kvs "Hizengengosyori" 0 :normal))


(test* "henkan toplevel(for Elisp) 1"
       '(("＊" nil "*" j 0) ("※" nil "*" j 1) ("×" nil "*" j 2) ("＊" nil "*" z 3) ("*" nil "*" l 4))
       (sekkaHenkan userid kvs #f "*" 0 "normal" "" ""))

(test* "henkan toplevel(for Elisp) 2"
       '(("しぜんげんごりか" nil "shizengengorika" h 0) ("シゼンゲンゴリカ" nil "shizengengorika" k 1) ("しぜにぇにょりか" nil "shizengengorika" h 2) ("シゼニェニョリカ" nil "shizengengorika" k 3) ("ｓｈｉｚｅｎｇｅｎｇｏｒｉｋａ" nil "shizengengorika" z 4) ("shizengengorika" nil "shizengengorika" l 5) ("自然言語理解" nil "しぜんげんごりかい" j 6) ("自然言語" nil "しぜんげんご" j 7) ("自然言語処理" nil "しぜんげんごしょり" j 8))
       (sekkaHenkan userid kvs #f "shizengengorika" 0 "normal" "" ""))

(test* "henkan toplevel(for Elisp) 3"
       '(("自然言語理解" nil "しぜんげんごりかい" j 0) ("自然言語" nil "しぜんげんご" j 1) ("自然言語処理" nil "しぜんげんごしょり" j 2) ("しぜんげんごりか" nil "shizengengorika" h 3) ("シゼンゲンゴリカ" nil "shizengengorika" k 4) ("しぜにぇにょりか" nil "shizengengorika" h 5) ("シゼニェニョリカ" nil "shizengengorika" k 6) ("Ｓｈｉｚｅｎｇｅｎｇｏｒｉｋａ" nil "Shizengengorika" z 7) ("Shizengengorika" nil "Shizengengorika" l 8))
       (sekkaHenkan userid kvs #f "Shizengengorika" 0 "normal" "" ""))

(test* "henkan toplevel(for Elisp) 4"
       '(("変化する" nil "へんかs" j 0) ("へんかする" nil "henkasuru" h 1) ("ヘンカスル" nil "henkasuru" k 2) ("へにんあする" nil "henkasuru" h 3) ("ヘニンアスル" nil "henkasuru" k 4) ("ｈｅｎｋａＳｕｒｕ" nil "henkaSuru" z 5) ("henkaSuru" nil "henkaSuru" l 6))
       (sekkaHenkan userid kvs #f "henkaSuru" 0 "normal" "" ""))

(test* "henkan toplevel(for Elisp) 5"
       '(("変換" nil "へんかん" j 0) ("返還" nil "へんかん" j 1) ("変化" nil "へんか" j 2) ("返歌" nil "へんか" j 3) ("へんかん" nil "henkan" h 4) ("ヘンカン" nil "henkan" k 5) ("へにんあん" nil "henkan" h 6) ("ヘニンアン" nil "henkan" k 7) ("Ｈｅｎｋａｎ" nil "Henkan" z 8) ("Henkan" nil "Henkan" l 9))
       (sekkaHenkan userid kvs #f "Henkan" 0 "normal" "" ""))

(test* "henkan toplevel(for Elisp) 6"
       '(("マジパネェ" nil "まじぱねぇ" j 0) ("まじパネェ" nil "まじぱねぇ" j 1) ("マジ半端ネェ" nil "まじぱねぇ" j 2) ("まじ半端ネェ" nil "まじぱねぇ" j 3) ("まじぱねえ" nil "majipanee" h 4) ("マジパネエ" nil "majipanee" k 5) ("Ｍａｊｉｐａｎｅｅ" nil "Majipanee" z 6) ("Majipanee" nil "Majipanee" l 7))
       (sekkaHenkan userid kvs #f "Majipanee" 0 "normal" "" ""))

(test* "henkan toplevel(for Elisp) 7"
       '(("変換エンジン" nil "へんかんえんじん" j 0) ("変換" nil "へんかん" j 1) ("返還" nil "へんかん" j 2) ("へんかねんじ" nil "henkanenji" h 3) ("ヘンカネンジ" nil "henkanenji" k 4) ("へにんあねぬんい" nil "henkanenji" h 5) ("ヘニンアネヌンイ" nil "henkanenji" k 6) ("Ｈｅｎｋａｎｅｎｊｉ" nil "Henkanenji" z 7) ("Henkanenji" nil "Henkanenji" l 8))
       (sekkaHenkan userid kvs #f "Henkanenji" 0 "normal" "" ""))

(test* "henkan toplevel(for Elisp) 8"
       '(("ブログった" nil "ぶろぐt" j 0) ("ブログった" nil "ぶろぐ+" j 1) ("ブログった" nil "ぶろぐr" j 2) ("ブログった" nil "ぶろぐ`" j 3) ("ぶろぐった" nil "burogutta" h 4) ("ブログッタ" nil "burogutta" k 5) ("ｂｕｒｏｇｕＴｔａ" nil "buroguTta" z 6) ("buroguTta" nil "buroguTta" l 7))
       (sekkaHenkan userid kvs #f "buroguTta" 0 "normal" "" ""))

(test* "henkan toplevel(for Elisp) 9"
       '(("ブログりました" nil "ぶろぐr" j 0) ("ブログりました" nil "ぶろぐ+" j 1) ("ブログりました" nil "ぶろぐt" j 2) ("ブログりました" nil "ぶろぐ`" j 3) ("ぶろぐりました" nil "burogurimashita" h 4) ("ブログリマシタ" nil "burogurimashita" k 5) ("ｂｕｒｏｇｕＲｉｍａｓｈｉｔａ" nil "buroguRimashita" z 6) ("buroguRimashita" nil "buroguRimashita" l 7))
       (sekkaHenkan userid kvs #f "buroguRimashita" 0 "normal" "" ""))

(test* "henkan toplevel(for Elisp) 10"
       '(("はてブ" nil "はてぶ" j 0) ("はてなブックマーク" nil "はてぶ" j 1) ("はてぶ" nil "hatebu" h 2) ("ハテブ" nil "hatebu" k 3) ("Ｈａｔｅｂｕ" nil "Hatebu" z 4) ("Hatebu" nil "Hatebu" l 5))
       (sekkaHenkan userid kvs #f "Hatebu" 0 "normal" "" ""))

(test* "henkan toplevel(for Elisp) 11"
       '(("かに" nil "kani" h 0) ("カニ" nil "kani" k 1) ("ｋａｎｉ" nil "kani" z 2) ("kani" nil "kani" l 3) ("蟹" nil "かに" j 4) ("可児" nil "かに" j 5) ("蠏" nil "かに" j 6) ("簡易" nil "かんい" j 7) ("官位" nil "かんい" j 8) ("冠位" "-十二階" "かんい" j 9) ("漢医" "漢方医" "かんい" j 10) ("敢為" nil "かんい" j 11) ("官医" nil "かんい" j 12) ("寛衣" nil "かんい" j 13) ("換位" nil "かんい" j 14) ("簡意" nil "かんい" j 15))
       (sekkaHenkan userid kvs #f "kani" 0 "normal" "" ""))

(test* "henkan toplevel(for Elisp) 12"
       '(("かんい" nil "kanni" h 0) ("カンイ" nil "kanni" k 1) ("ｋａｎｎｉ" nil "kanni" z 2) ("kanni" nil "kanni" l 3) ("簡易" nil "かんい" j 4) ("官位" nil "かんい" j 5) ("冠位" "-十二階" "かんい" j 6) ("漢医" "漢方医" "かんい" j 7) ("敢為" nil "かんい" j 8) ("官医" nil "かんい" j 9) ("寛衣" nil "かんい" j 10) ("換位" nil "かんい" j 11) ("簡意" nil "かんい" j 12) ("蟹" nil "かに" j 13) ("可児" nil "かに" j 14) ("蠏" nil "かに" j 15))
       (sekkaHenkan userid kvs #f "kanni" 0 "normal" "" ""))

(test* "henkan toplevel(for Elisp) 13"
       '(("確固" nil "かっこ" j 0) ("括弧" nil "かっこ" j 1) ("かっこ" nil "ka@ko" h 2) ("カッコ" nil "ka@ko" k 3) ("Ｋａ＠ｋｏ" nil "Ka@ko" z 4) ("Ka@ko" nil "Ka@ko" l 5))
       (sekkaHenkan userid kvs #f "Ka@ko" 2 "normal" "" ""))

(test* "henkan toplevel(for Elisp) 14"
       '(("かっこ" nil "ka@ko" h 0) ("カッコ" nil "ka@ko" k 1) ("ｋａ＠ｋｏ" nil "ka@ko" z 2) ("ka@ko" nil "ka@ko" l 3) ("確固" nil "かっこ" j 4) ("括弧" nil "かっこ" j 5))
       (sekkaHenkan userid kvs #f "ka@ko" 2 "normal" "" ""))

(test* "henkan toplevel(for Elisp) 15"
       '(("確固" nil "かっこ" j 0) ("括弧" nil "かっこ" j 1) ("かっこ" nil "ka;ko" h 2) ("カッコ" nil "ka;ko" k 3) ("Ｋａ；ｋｏ" nil "Ka;ko" z 4) ("Ka;ko" nil "Ka;ko" l 5))
       (sekkaHenkan userid kvs #f "Ka;ko" 2 "normal" "" ""))

(test* "henkan toplevel(for Elisp) 16"
       '(("かっこ" nil "ka;ko" h 0) ("カッコ" nil "ka;ko" k 1) ("ｋａ；ｋｏ" nil "ka;ko" z 2) ("ka;ko" nil "ka;ko" l 3) ("確固" nil "かっこ" j 4) ("括弧" nil "かっこ" j 5))
       (sekkaHenkan userid kvs #f "ka;ko" 2 "normal" "" ""))

(test* "henkan toplevel(for Elisp) 17"
       '(("ユーザー辞書" nil "ゆーざーじしょ" j 0) ("ゆーざーじしょ" nil "yu-za-jisyo" h 1) ("ユーザージショ" nil "yu-za-jisyo" k 2) ("Ｙｕ－ｚａ－ｊｉｓｙｏ" nil "Yu-za-jisyo" z 3) ("Yu-za-jisyo" nil "Yu-za-jisyo" l 4))
       (sekkaHenkan userid kvs #f "Yu-za-jisyo" 2 "normal" "" ""))

(test* "henkan toplevel(for Elisp) 18"
       '(("２月２８日" nil "#がつ#にち" n 0) ("2月28日" nil "#がつ#にち" n 1) ("二月二八日" nil "#がつ#にち" n 2) ("二月２８日" nil "#がつ#にち" n 3) ("２ｇａｔｕ２８ｎｉｃｈｉ" nil "2gatu28nichi" z 4) ("2gatu28nichi" nil "2gatu28nichi" l 5))
       (sekkaHenkan userid kvs #f "2gatu28nichi" 0 "normal" "" ""))

(test* "henkan toplevel(for Elisp) 19"
       '(("１００" nil "100" n 0) ("100" nil "100" n 1) ("一〇〇" nil "100" n 2) ("百" nil "100" n 3))
       (sekkaHenkan userid kvs #f "100" 0 "normal" "" ""))

(test* "henkan toplevel(for Elisp) 20"
       '(("１００００２０００３" nil "1000020003" n 0) ("1000020003" nil "1000020003" n 1) ("一〇〇〇〇二〇〇〇三" nil "1000020003" n 2) ("十億二万三" nil "1000020003" n 3))
       (sekkaHenkan userid kvs #f "1000020003" 0 "normal" "" ""))
(test* "henkan toplevel(for Elisp) 21"
       '(("3チーム" nil "#ちーむ" n 0) ("３ｃｈｉ－ｍｕ" nil "3chi-mu" z 1) ("3chi-mu" nil "3chi-mu" l 2))
       (sekkaHenkan userid kvs #f "3chi-mu" 0 "normal" "" ""))


;;-------------------------------------------------------------------
(test-section "sekka henkan reorder kouho")

(test* "henkan reorder kouho 1"
       '(("確立" #f "かくりつ" j 0) ("かくりつ" #f "kakuritu" h 1) ("カクリツ" #f "kakuritu" k 2) ("ｋａｋｕｒｉｔｕ" #f "kakuritu" z 3) ("kakuritu" #f "kakuritu" l 4) ("確率" #f "かくりつ" j 5))
       (reorder-henkan-result
        "/あたり/あり/あるいは/および/か/かも/から/が/くらい/ぐらい/こそ/さえ/さん/し/しか/じゃ/じゃん/すら/する/そして/その/そのまま/そのもの/その他/それ/だ/だけ/だっ/だって/だの/だろ/って/っていう/ってな/っぽい/づけ/づける/て/で/でし/でしょ/です/でも/と/という/といった/とか/とかいう/として/とともに/とも/と共に/ど/どおり/な/ないし/なき/なく/なし/など/なら/ならびに/なり/なる/なんか/なんぞ/なんて/に/において/における/にたいする/について/にて/にとって/によって/により/による/に対し/に対して/に対する/に従い/に従って/に関して/に関する/ね/の/のみ/は/ばかり/ばっか/ばっかり/へ/ほか/ほど/または/まで/みたい/めい/も/もっと/や/やっ/やら/よ/より/らしい/を/をめぐって/を以て/を通して/を通じて/アプローチ/アンチエディプス・/グループ/ゲーム/コラム/コース/サイクル/サイト/シミュレーション/シンポジウム/ジェノミクス/スレ/セミナー/センター/テキスト/データ/トレーニング/ハンドブック/ピーク/ベース/マスター/メディカル・イーティング/モデル/リロン/レベル/ワインバーグサラム/ワークショップ/・/ー/一/一つ/一夜漬け/一般/一辺倒/上/下/世界/両面/並びに/中/中心/中編/主義/予想/予測/云々/交流/人間/付け/付ける/以上/以前/以外/仮説/会談/体系/作業/価値/価格/信仰/倒れ/倒産/値/偏重/優先/先行/入門/全/全体/全般/全開/内/内容/再/分布/分析/分野/刑法/前編/効率/勉強/動向/勝ち/勝率/包蔵/化/化学/厨/及び/叢書/史/君/哲学/問題/在庫/型/基盤/基礎/増補/大/天体/天文学/好き/委員/学/学会/学習/学者/宇宙/完成/実証/実践/実験/家/容量/密度/対策/専攻/専門/導入/屋/展開/崩壊/帳簿/平成/序説/度数/式/強度/形式/形成/後編/心理/志向/応用/思考/性/性能/情報/戦線/手法/批判/技術/抜き/担当/指導/振りかざし/採用/接続/掲示板/提唱/改訂/攻め/政治/政策/教え/教育/数値/数学/整然/整然と/整理/方法/暗記/曲線/書/最大/本/板/枠/枠組/枠組み/株価/核/根拠/検定/検討/検証/概念/概説/構成/構築/構造/模型/機関/武装/段/段数/水力/水準/波形/洋裁/活動/活用/派/混合/演算/演習/炸裂/無視/熱/物理/状況/班/現代/理学/理屈/理性/理解/理論/生態/生物/生計/用語/界/疫学/発展/発表/的/矛盾/知/知っ/知ら/知識/研/研修/研究/研究所/破綻/確立/社/社会/科/科学/科目/空/空気/立っ/立て/第/等/篇/系/紹介/経済/統合/編/習得/考古学/考察/者/背景/自体/自然/自身/英語/装置/解/解明/解析/解説/言語/計算/設計/評価/試験/詰め/誌/誕生/説明/課題/講座/講義/講習/負荷/走/追求/通り/適用/部/部会/部分/部門/配信/重/重視/量/鍵/開発/間/関係/関連/闘争/限界/集/集団/雑誌/電磁気/面/音楽/領域/魔術"
        '(("確立" #f "かくりつ" j 0) ("かくりつ" #f "kakuritu" h 1) ("カクリツ" #f "kakuritu" k 2) ("ｋａｋｕｒｉｔｕ" #f "kakuritu" z 3) ("kakuritu" #f "kakuritu" l 4) ("確率" #f "かくりつ" j 5))))
        
;;-------------------------------------------------------------------
(test-section "sekka henkan toplevel(2)")
(test* "henkan toplevel with pre 1"
       '(("変換" #f "へんかん" j 0) ("返還" #f "へんかん" j 1) ("変化" #f "へんか" j 2) ("返歌" #f "へんか" j 3) ("へんかん" #f "henkan" h 4) ("ヘンカン" #f "henkan" k 5) ("へにんあん" #f "henkan" h 6) ("ヘニンアン" #f "henkan" k 7) ("Ｈｅｎｋａｎ" #f "Henkan" z 8) ("Henkan" #f "Henkan" l 9))
       (sekka-henkan-with-pre userid kvs "Henkan" 0 :normal "" ""))

(test* "henkan toplevel with pre 2"
       '(("拘束" #f "こうそく" j 0) ("高速" #f "こうそく" j 1) ("光速" #f "こうそく" j 2) ("こうそく" #f "kousoku" h 3) ("コウソク" #f "kousoku" k 4) ("Ｋｏｕｓｏｋｕ" #f "Kousoku" z 5) ("Kousoku" #f "Kousoku" l 6))
       (sekka-henkan-with-pre userid kvs "Kousoku" 0 :normal "" ""))

(test* "henkan toplevel with pre 3"
       '(("痛心" #f "つうしん" j 0) ("通信" #f "つうしん" j 1) ("つうしん" #f "tuushin" h 2) ("ツウシン" #f "tuushin" k 3) ("Ｔｕｕｓｈｉｎ" #f "Tuushin" z 4) ("Tuushin" #f "Tuushin" l 5))
       (sekka-henkan-with-pre userid kvs "Tuushin" 0 :normal "" ""))

(test* "henkan toplevel with pre 4"
       '(("つうしん" #f "tuushin" h 0) ("通信" #f "つうしん" j 1) ("ツウシン" #f "tuushin" k 2) ("ｔｕｕｓｈｉｎ" #f "tuushin" z 3) ("tuushin" #f "tuushin" l 4) ("痛心" #f "つうしん" j 5) )
       (sekka-henkan-with-pre userid kvs "tuushin" 0 :normal "高速" ""))

(test* "henkan toplevel with pre 5"
       '(("かくりつ" #f "kakuritu" h 0) ("確率" #f "かくりつ" j 1) ("カクリツ" #f "kakuritu" k 2) ("ｋａｋｕｒｉｔｕ" #f "kakuritu" z 3) ("kakuritu" #f "kakuritu" l 4) ("確立" #f "かくりつ" j 5))
       (sekka-henkan-with-pre userid kvs "kakuritu" 0 :normal "高い" ""))

(test* "henkan toplevel with pre 6"
       '(("かくりつ" #f "kakuritu" h 0) ("確率" #f "かくりつ" j 1) ("カクリツ" #f "kakuritu" k 2) ("ｋａｋｕｒｉｔｕ" #f "kakuritu" z 3) ("kakuritu" #f "kakuritu" l 4) ("確立" #f "かくりつ" j 5))
       (sekka-henkan-with-pre userid kvs "kakuritu" 0 :normal "" "失敗"))

(test* "henkan toplevel with pre 7"
       '(("かくりつ" #f "kakuritu" h 0) ("確立" #f "かくりつ" j 1) ("カクリツ" #f "kakuritu" k 2) ("ｋａｋｕｒｉｔｕ" #f "kakuritu" z 3) ("kakuritu" #f "kakuritu" l 4) ("確率" #f "かくりつ" j 5) )
       (sekka-henkan-with-pre userid kvs "kakuritu" 0 :normal "" "理論"))

(test* "henkan toplevel with pre 8"
       '(("つうしん" #f "tuushin" h 0) ("通信" #f "つうしん" j 1) ("ツウシン" #f "tuushin" k 2) ("ｔｕｕｓｈｉｎ" #f "tuushin" z 3) ("tuushin" #f "tuushin" l 4) ("痛心" #f "つうしん" j 5))
       (sekka-henkan-with-pre userid kvs "tuushin" 0 :normal "高速" ""))

(test* "henkan toplevel with pre 9"
       '(("かくりつ" #f "kakuritu" h 0) ("確立" #f "かくりつ" j 1) ("カクリツ" #f "kakuritu" k 2) ("ｋａｋｕｒｉｔｕ" #f "kakuritu" z 3) ("kakuritu" #f "kakuritu" l 4) ("確率" #f "かくりつ" j 5))
       (sekka-henkan-with-pre userid kvs "kakuritu" 0 :normal "" "理論"))

;;-------------------------------------------------------------------
(test-section "henkan kakutei")
(test* "henkan kakutei(for Elisp) 1"
       '(("返還" nil "へんかん" j 0) ("変換" nil "へんかん" j 1) ("変化" nil "へんか" j 2) ("返歌" nil "へんか" j 3) ("へんかん" nil "henkan" h 4) ("ヘンカン" nil "henkan" k 5) ("へにんあん" nil "henkan" h 6) ("ヘニンアン" nil "henkan" k 7) ("Ｈｅｎｋａｎ" nil "Henkan" z 8) ("Henkan" nil "Henkan" l 9))
       (begin
         (sekkaKakutei userid kvs #f "へんかん" "返還")
         (sekkaHenkan userid kvs #f "Henkan" 0 "normal" "" "")))

(test* "DB check after henkan kakutei 1"
       "/返還/変換"
       (kvs.get (+ userid ":へんかん")))

(test* "henkan kakutei(for Elisp) 2"
       '(("変換" nil "へんかん" j 0) ("返還" nil "へんかん" j 1) ("変化" nil "へんか" j 2) ("返歌" nil "へんか" j 3) ("へんかん" nil "henkan" h 4) ("ヘンカン" nil "henkan" k 5) ("へにんあん" nil "henkan" h 6) ("ヘニンアン" nil "henkan" k 7) ("Ｈｅｎｋａｎ" nil "Henkan" z 8) ("Henkan" nil "Henkan" l 9))
       (begin
         (sekkaKakutei userid kvs #f "へんかん" "変換")
         (sekkaHenkan userid kvs #f "Henkan" 0 "normal" "" "")))

(test* "DB check after henkan kakutei 2"
       "/変換/返還"
       (kvs.get (+ userid ":へんかん")))

(test* "henkan kakutei(for Elisp) 3"
       '(("デベロッパ" nil "developer" j 0) ("デベロッパー" nil "developer" j 1) ("ディベロッパー" nil "developer" j 2) ("ｄｅｖｅｌｏｐｅｒ" nil "developer" z 3) ("developer" nil "developer" l 4))
       (begin
         (sekkaKakutei userid kvs #f "developer" "デベロッパ")
         (sekkaHenkan userid kvs #f "developer" 0 "normal" "" "")))

(test* "henkan kakutei(for Elisp) 4"
       '(("。" nil "." j 0) ("．" nil "." j 1) ("・" nil "." j 2) ("…" "..." "." j 3) ("．" nil "." z 4) ("." nil "." l 5))
       (begin
         (sekkaKakutei userid kvs #f "." "。")
         (sekkaHenkan userid kvs #f "." 0 "normal" "" "")))

(test* "henkan kakutei(for Elisp) 5"
       nil
       (sekkaKakutei userid kvs #f "." "。"))

(test* "henkan kakutei(for Elisp) 6"
       nil
       (sekkaKakutei userid kvs #f "developper" "デベロッパ"))

(test* "henkan kakutei(for Elisp) 7"
       nil
       (sekkaKakutei userid kvs #f "wo" "を"))

(test* "henkan kakutei(for Elisp) 8"
       '(("はてなブックマーク" nil "はてぶ" j 0) ("はてブ" nil "はてぶ" j 1) ("はてぶ" nil "hatebu" h 2) ("ハテブ" nil "hatebu" k 3) ("Ｈａｔｅｂｕ" nil "Hatebu" z 4) ("Hatebu" nil "Hatebu" l 5))
       (begin
         (sekkaKakutei userid kvs #f "はてぶ" "はてなブックマーク")
         (sekkaHenkan userid kvs #f "Hatebu" 0 "normal" "" "")))


(test* "henkan kakutei(for Elisp) 9"
       '(("．" nil "." j 0) ("・" nil "." j 1) ("。" nil "." j 2) ("…" "..." "." j 3) ("．" nil "." z 4) ("." nil "." l 5))
       (begin
         (sekkaHenkan userid2 kvs #f "." 0 "normal" "" "")))                  ;; userid2

(test* "henkan kakutei(for Elisp) 10"
       '(("。" nil "." j 0) ("．" nil "." j 1) ("・" nil "." j 2) ("…" "..." "." j 3) ("．" nil "." z 4) ("." nil "." l 5))
       (begin
         (sekkaKakutei userid2 kvs #f "." "。")                               ;; userid2
         (sekkaHenkan userid2 kvs #f "." 0 "normal" "" "")))                  ;; userid2

(test* "henkan kakutei(for Elisp) 11"
       '(("。" nil "." j 0) ("．" nil "." j 1) ("・" nil "." j 2) ("…" "..." "." j 3) ("．" nil "." z 4) ("." nil "." l 5))
       (begin
         (sekkaHenkan userid2 kvs #f "." 0 "normal" "" "")))                  ;; userid2

(test* "henkan kakutei(for Elisp) 12"
       nil
       (sekkaKakutei userid2 kvs #f "wo" "を"))                        ;; userid2


(test* "henkan kakutei(for Elisp) 13"
       '(("観" "(字義:みわたす)" "みr" j 0) ("見" nil "みr" j 1) ("視" "(字義:じっとみる)" "みr" j 2) ("診" "(diagnose) 患者を診る" "みr" j 3) ("看" "(nurse) 病母を看る" "みr" j 4) ("觀" "「観」の旧字" "みr" j 5) ("ｍｉＲ" nil "miR" z 6) ("miR" nil "miR" l 7))
       (begin
         (sekkaKakutei userid kvs #f "みr" "観")
         (sekkaHenkan userid kvs #f "miR" 0 "normal" "" "")))

(test* "henkan kakutei(for Elisp) 14"
       '(("視" "(字義:じっとみる)" "みr" j 0) ("観" "(字義:みわたす)" "みr" j 1) ("見" nil "みr" j 2) ("診" "(diagnose) 患者を診る" "みr" j 3) ("看" "(nurse) 病母を看る" "みr" j 4) ("觀" "「観」の旧字" "みr" j 5) ("ｍｉＲ" nil "miR" z 6) ("miR" nil "miR" l 7))
       (begin
         (sekkaKakutei userid kvs #f "みr" "視")
         (sekkaHenkan userid kvs #f "miR" 0 "normal" "" "")))

(test* "henkan kakutei(for Elisp) 15"
       '(("観る" "(字義:みわたす)" "みr" j 0) ("見る" nil "みr" j 1) ("視る" "(字義:じっとみる)" "みr" j 2) ("診る" "(diagnose) 患者を診る" "みr" j 3) ("看る" "(nurse) 病母を看る" "みr" j 4) ("觀る" "「観」の旧字" "みr" j 5) ("みる" nil "miru" h 6) ("ミル" nil "miru" k 7) ("ｍｉＲｕ" nil "miRu" z 8) ("miRu" nil "miRu" l 9))
       (begin
         (sekkaKakutei userid2 kvs #f "みr" "観る")                    ;; userid2
         (sekkaHenkan userid2 kvs #f "miRu" 0 "normal" "" "")))        ;; userid2

(test* "henkan kakutei(for Elisp) 16"
       '(("かに" nil "kani" h 0) ("カニ" nil "kani" k 1) ("ｋａｎｉ" nil "kani" z 2) ("kani" nil "kani" l 3) ("可児" nil "かに" j 4) ("蟹" nil "かに" j 5) ("蠏" nil "かに" j 6) ("簡易" nil "かんい" j 7) ("官位" nil "かんい" j 8) ("冠位" "-十二階" "かんい" j 9) ("漢医" "漢方医" "かんい" j 10) ("敢為" nil "かんい" j 11) ("官医" nil "かんい" j 12) ("寛衣" nil "かんい" j 13) ("換位" nil "かんい" j 14) ("簡意" nil "かんい" j 15))
       (begin
         (sekkaKakutei userid kvs #f "かに" "可児")
         (sekkaHenkan userid kvs #f "kani" 0 "normal" "" "")))
(test* "henkan kakutei(for Elisp) 17"
       '(("かんい" nil "kanni" h 0) ("カンイ" nil "kanni" k 1) ("ｋａｎｎｉ" nil "kanni" z 2) ("kanni" nil "kanni" l 3) ("官位" nil "かんい" j 4) ("簡易" nil "かんい" j 5) ("冠位" "-十二階" "かんい" j 6) ("漢医" "漢方医" "かんい" j 7) ("敢為" nil "かんい" j 8) ("官医" nil "かんい" j 9) ("寛衣" nil "かんい" j 10) ("換位" nil "かんい" j 11) ("簡意" nil "かんい" j 12) ("可児" nil "かに" j 13) ("蟹" nil "かに" j 14) ("蠏" nil "かに" j 15))
       (begin
         (sekkaKakutei userid kvs #f "かんい" "官位")
         (sekkaHenkan userid kvs #f "kanni" 0 "normal" "" "")))

;;===================================================================

;; ---後処理---
(kvs.close)
;; 最終的な辞書の状態を目視するためのダンプ
;;(dump-sekka-jisyo-f STDOUT target)

(test-end)
