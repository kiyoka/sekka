#!/usr/local/bin/nendo
:; #-*- mode: nendo; syntax: scheme -*-;;

(use srfi-1)
(use sekka.roman-lib)
(use sekka.alphabet-lib)

(define limit-entries 1000)

(define (construct-hash f mode)
  (let1 h (make-hash-table)
    (for-each
     (lambda (line)
       (let1 lst (to-list (line.chomp.split))
         (let* ([k (first  lst)]
                [real-k (if (= "2" mode)
                            (+ "2:"  k)
                            (+ "2_:" k))]
                [v (if (= "2" mode)
                       (second lst)
                       (third lst))]
                [_ (hash-table-get h real-k "")])
           (when
               (and
                (not (include-alphabet-hankaku k)) ;; k,vにアルファベットが含まれない
                (not (include-alphabet-hankaku v))
                (include-kanji k)                  ;; kに漢字が含まれている
                (is-kanji v)                       ;; vが漢字のみで構成されている
                )
             (hash-table-put! h real-k (+ _ "/" v))))))
     f.lazy)
    h))

(define (construct mode)
  (let1 h (construct-hash STDIN mode)
    (hash-table-for-each h
      (lambda (key value)
        (let* ([entries (to-list (value.split #/\//))]
               [entries (delete-duplicates entries)])
          (if (< (length entries) limit-entries)
              (printf "%s\t%s\n" key value)
              (begin
                (printf "%s\t%s\n" key (string-join
                                        (take entries limit-entries)
                                        "/")))))))))
  
(define (usage)
  (STDERR.print "usage: ngram_to_sekkatsv.nnd [mode]\n")
  (STDERR.print "        mode ... 2 or skip2        \n"))

(define (main argv)
  (if (= 0 (length argv))
      (begin
        (usage)
        (exit 1))
      (cond
       ((= "2" (car argv))
        (construct "2"))
       ((= "skip2" (car argv))
        (construct "skip2"))
       (else
        (usage)
        (exit 1)))))
